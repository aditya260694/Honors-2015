   21 #ifndef AVFORMAT_AVFORMAT_H
   22 #define AVFORMAT_AVFORMAT_H
   23 
   24 /**
   25  * @file
   26  * @ingroup libavf
   27  * Main libavformat public API header
   28  */
   29 
   30 /**
   31  * @defgroup libavf I/O and Muxing/Demuxing Library
   32  * @{
   33  *
   34  * Libavformat (lavf) is a library for dealing with various media container
   35  * formats. Its main two purposes are demuxing - i.e. splitting a media file
   36  * into component streams, and the reverse process of muxing - writing supplied
   37  * data in a specified container format. It also has an @ref lavf_io
   38  * "I/O module" which supports a number of protocols for accessing the data (e.g.
   39  * file, tcp, http and others). Before using lavf, you need to call
   40  * av_register_all() to register all compiled muxers, demuxers and protocols.
   41  * Unless you are absolutely sure you won't use libavformat's network
   42  * capabilities, you should also call avformat_network_init().
   43  *
   44  * A supported input format is described by an AVInputFormat struct, conversely
   45  * an output format is described by AVOutputFormat. You can iterate over all
   46  * registered input/output formats using the av_iformat_next() /
   47  * av_oformat_next() functions. The protocols layer is not part of the public
   48  * API, so you can only get the names of supported protocols with the
   49  * avio_enum_protocols() function.
   50  *
   51  * Main lavf structure used for both muxing and demuxing is AVFormatContext,
   52  * which exports all information about the file being read or written. As with
   53  * most Libavformat structures, its size is not part of public ABI, so it cannot be
   54  * allocated on stack or directly with av_malloc(). To create an
   55  * AVFormatContext, use avformat_alloc_context() (some functions, like
   56  * avformat_open_input() might do that for you).
   57  *
   58  * Most importantly an AVFormatContext contains:
   59  * @li the @ref AVFormatContext.iformat "input" or @ref AVFormatContext.oformat
   60  * "output" format. It is either autodetected or set by user for input;
   61  * always set by user for output.
   62  * @li an @ref AVFormatContext.streams "array" of AVStreams, which describe all
   63  * elementary streams stored in the file. AVStreams are typically referred to
   64  * using their index in this array.
   65  * @li an @ref AVFormatContext.pb "I/O context". It is either opened by lavf or
   66  * set by user for input, always set by user for output (unless you are dealing
   67  * with an AVFMT_NOFILE format).
   68  *
   69  * @section lavf_options Passing options to (de)muxers
   70  * Lavf allows to configure muxers and demuxers using the @ref avoptions
   71  * mechanism. Generic (format-independent) libavformat options are provided by
   72  * AVFormatContext, they can be examined from a user program by calling
   73  * av_opt_next() / av_opt_find() on an allocated AVFormatContext (or its AVClass
   74  * from avformat_get_class()). Private (format-specific) options are provided by
   75  * AVFormatContext.priv_data if and only if AVInputFormat.priv_class /
   76  * AVOutputFormat.priv_class of the corresponding format struct is non-NULL.
   77  * Further options may be provided by the @ref AVFormatContext.pb "I/O context",
   78  * if its AVClass is non-NULL, and the protocols layer. See the discussion on
   79  * nesting in @ref avoptions documentation to learn how to access those.
   80  *
   81  * @defgroup lavf_decoding Demuxing
   82  * @{
   83  * Demuxers read a media file and split it into chunks of data (@em packets). A
   84  * @ref AVPacket "packet" contains one or more encoded frames which belongs to a
   85  * single elementary stream. In the lavf API this process is represented by the
   86  * avformat_open_input() function for opening a file, av_read_frame() for
   87  * reading a single packet and finally avformat_close_input(), which does the
   88  * cleanup.
   89  *
   90  * @section lavf_decoding_open Opening a media file
   91  * The minimum information required to open a file is its URL or filename, which
   92  * is passed to avformat_open_input(), as in the following code:
   93  * @code
   94  * const char    *url = "in.mp3";
   95  * AVFormatContext *s = NULL;
   96  * int ret = avformat_open_input(&s, url, NULL, NULL);
   97  * if (ret < 0)
   98  *     abort();
   99  * @endcode
  100  * The above code attempts to allocate an AVFormatContext, open the
  101  * specified file (autodetecting the format) and read the header, exporting the
  102  * information stored there into s. Some formats do not have a header or do not
  103  * store enough information there, so it is recommended that you call the
  104  * avformat_find_stream_info() function which tries to read and decode a few
  105  * frames to find missing information.
  106  *
  107  * In some cases you might want to preallocate an AVFormatContext yourself with
  108  * avformat_alloc_context() and do some tweaking on it before passing it to
  109  * avformat_open_input(). One such case is when you want to use custom functions
  110  * for reading input data instead of lavf internal I/O layer.
  111  * To do that, create your own AVIOContext with avio_alloc_context(), passing
  112  * your reading callbacks to it. Then set the @em pb field of your
  113  * AVFormatContext to newly created AVIOContext.
  114  *
  115  * Since the format of the opened file is in general not known until after
  116  * avformat_open_input() has returned, it is not possible to set demuxer private
  117  * options on a preallocated context. Instead, the options should be passed to
  118  * avformat_open_input() wrapped in an AVDictionary:
  119  * @code
  120  * AVDictionary *options = NULL;
  121  * av_dict_set(&options, "video_size", "640x480", 0);
  122  * av_dict_set(&options, "pixel_format", "rgb24", 0);
  123  *
  124  * if (avformat_open_input(&s, url, NULL, &options) < 0)
  125  *     abort();
  126  * av_dict_free(&options);
  127  * @endcode
  128  * This code passes the private options 'video_size' and 'pixel_format' to the
  129  * demuxer. They would be necessary for e.g. the rawvideo demuxer, since it
  130  * cannot know how to interpret raw video data otherwise. If the format turns
  131  * out to be something different than raw video, those options will not be
  132  * recognized by the demuxer and therefore will not be applied. Such unrecognized
  133  * options are then returned in the options dictionary (recognized options are
  134  * consumed). The calling program can handle such unrecognized options as it
  135  * wishes, e.g.
  136  * @code
  137  * AVDictionaryEntry *e;
  138  * if (e = av_dict_get(options, "", NULL, AV_DICT_IGNORE_SUFFIX)) {
  139  *     fprintf(stderr, "Option %s not recognized by the demuxer.\n", e->key);
  140  *     abort();
  141  * }
  142  * @endcode
  143  *
  144  * After you have finished reading the file, you must close it with
  145  * avformat_close_input(). It will free everything associated with the file.
  146  *
  147  * @section lavf_decoding_read Reading from an opened file
  148  * Reading data from an opened AVFormatContext is done by repeatedly calling
  149  * av_read_frame() on it. Each call, if successful, will return an AVPacket
  150  * containing encoded data for one AVStream, identified by
  151  * AVPacket.stream_index. This packet may be passed straight into the libavcodec
  152  * decoding functions avcodec_decode_video2(), avcodec_decode_audio4() or
  153  * avcodec_decode_subtitle2() if the caller wishes to decode the data.
  154  *
  155  * AVPacket.pts, AVPacket.dts and AVPacket.duration timing information will be
  156  * set if known. They may also be unset (i.e. AV_NOPTS_VALUE for
  157  * pts/dts, 0 for duration) if the stream does not provide them. The timing
  158  * information will be in AVStream.time_base units, i.e. it has to be
  159  * multiplied by the timebase to convert them to seconds.
  160  *
  161  * If AVPacket.buf is set on the returned packet, then the packet is
  162  * allocated dynamically and the user may keep it indefinitely.
  163  * Otherwise, if AVPacket.buf is NULL, the packet data is backed by a
  164  * static storage somewhere inside the demuxer and the packet is only valid
  165  * until the next av_read_frame() call or closing the file. If the caller
  166  * requires a longer lifetime, av_dup_packet() will make an av_malloc()ed copy
  167  * of it.
  168  * In both cases, the packet must be freed with av_free_packet() when it is no
  169  * longer needed.
  170  *
  171  * @section lavf_decoding_seek Seeking
  172  * @}
  173  *
  174  * @defgroup lavf_encoding Muxing
  175  * @{
  176  * Muxers take encoded data in the form of @ref AVPacket "AVPackets" and write
  177  * it into files or other output bytestreams in the specified container format.
  178  *
  179  * The main API functions for muxing are avformat_write_header() for writing the
  180  * file header, av_write_frame() / av_interleaved_write_frame() for writing the
  181  * packets and av_write_trailer() for finalizing the file.
  182  *
  183  * At the beginning of the muxing process, the caller must first call
  184  * avformat_alloc_context() to create a muxing context. The caller then sets up
  185  * the muxer by filling the various fields in this context:
  186  *
  187  * - The @ref AVFormatContext.oformat "oformat" field must be set to select the
  188  *   muxer that will be used.
  189  * - Unless the format is of the AVFMT_NOFILE type, the @ref AVFormatContext.pb
  190  *   "pb" field must be set to an opened IO context, either returned from
  191  *   avio_open2() or a custom one.
  192  * - Unless the format is of the AVFMT_NOSTREAMS type, at least one stream must
  193  *   be created with the avformat_new_stream() function. The caller should fill
  194  *   the @ref AVStream.codec "stream codec context" information, such as the
  195  *   codec @ref AVCodecContext.codec_type "type", @ref AVCodecContext.codec_id
  196  *   "id" and other parameters (e.g. width / height, the pixel or sample format,
  197  *   etc.) as known. The @ref AVCodecContext.time_base "codec timebase" should
  198  *   be set to the timebase that the caller desires to use for this stream (note
  199  *   that the timebase actually used by the muxer can be different, as will be
  200  *   described later).
  201  * - The caller may fill in additional information, such as @ref
  202  *   AVFormatContext.metadata "global" or @ref AVStream.metadata "per-stream"
  203  *   metadata, @ref AVFormatContext.chapters "chapters", @ref
  204  *   AVFormatContext.programs "programs", etc. as described in the
  205  *   AVFormatContext documentation. Whether such information will actually be
  206  *   stored in the output depends on what the container format and the muxer
  207  *   support.
  208  *
  209  * When the muxing context is fully set up, the caller must call
  210  * avformat_write_header() to initialize the muxer internals and write the file
  211  * header. Whether anything actually is written to the IO context at this step
  212  * depends on the muxer, but this function must always be called. Any muxer
  213  * private options must be passed in the options parameter to this function.
  214  *
  215  * The data is then sent to the muxer by repeatedly calling av_write_frame() or
  216  * av_interleaved_write_frame() (consult those functions' documentation for
  217  * discussion on the difference between them; only one of them may be used with
  218  * a single muxing context, they should not be mixed). Do note that the timing
  219  * information on the packets sent to the muxer must be in the corresponding
  220  * AVStream's timebase. That timebase is set by the muxer (in the
  221  * avformat_write_header() step) and may be different from the timebase the
  222  * caller set on the codec context.
  223  *
  224  * Once all the data has been written, the caller must call av_write_trailer()
  225  * to flush any buffered packets and finalize the output file, then close the IO
  226  * context (if any) and finally free the muxing context with
  227  * avformat_free_context().
  228  * @}
  229  *
  230  * @defgroup lavf_io I/O Read/Write
  231  * @{
  232  * @}
  233  *
  234  * @defgroup lavf_codec Demuxers
  235  * @{
  236  * @defgroup lavf_codec_native Native Demuxers
  237  * @{
  238  * @}
  239  * @defgroup lavf_codec_wrappers External library wrappers
  240  * @{
  241  * @}
  242  * @}
  243  * @defgroup lavf_protos I/O Protocols
  244  * @{
  245  * @}
  246  * @defgroup lavf_internal Internal
  247  * @{
  248  * @}
  249  * @}
  250  *
  251  */
  252 
  253 #include <time.h>
  254 #include <stdio.h>  /* FILE */
  255 #include "libavcodec/avcodec.h"
  256 #include "libavutil/dict.h"
  257 #include "libavutil/log.h"
  258 
  259 #include "avio.h"
  260 #include "libavformat/version.h"
  261 
  262 struct AVFormatContext;
  263 
  264 struct AVDeviceInfoList;
  265 
  266 /**
  267  * @defgroup metadata_api Public Metadata API
  268  * @{
  269  * @ingroup libavf
  270  * The metadata API allows libavformat to export metadata tags to a client
  271  * application when demuxing. Conversely it allows a client application to
  272  * set metadata when muxing.
  273  *
  274  * Metadata is exported or set as pairs of key/value strings in the 'metadata'
  275  * fields of the AVFormatContext, AVStream, AVChapter and AVProgram structs
  276  * using the @ref lavu_dict "AVDictionary" API. Like all strings in FFmpeg,
  277  * metadata is assumed to be UTF-8 encoded Unicode. Note that metadata
  278  * exported by demuxers isn't checked to be valid UTF-8 in most cases.
  279  *
  280  * Important concepts to keep in mind:
  281  * -  Keys are unique; there can never be 2 tags with the same key. This is
  282  *    also meant semantically, i.e., a demuxer should not knowingly produce
  283  *    several keys that are literally different but semantically identical.
  284  *    E.g., key=Author5, key=Author6. In this example, all authors must be
  285  *    placed in the same tag.
  286  * -  Metadata is flat, not hierarchical; there are no subtags. If you
  287  *    want to store, e.g., the email address of the child of producer Alice
  288  *    and actor Bob, that could have key=alice_and_bobs_childs_email_address.
  289  * -  Several modifiers can be applied to the tag name. This is done by
  290  *    appending a dash character ('-') and the modifier name in the order
  291  *    they appear in the list below -- e.g. foo-eng-sort, not foo-sort-eng.
  292  *    -  language -- a tag whose value is localized for a particular language
  293  *       is appended with the ISO 639-2/B 3-letter language code.
  294  *       For example: Author-ger=Michael, Author-eng=Mike
  295  *       The original/default language is in the unqualified "Author" tag.
  296  *       A demuxer should set a default if it sets any translated tag.
  297  *    -  sorting  -- a modified version of a tag that should be used for
  298  *       sorting will have '-sort' appended. E.g. artist="The Beatles",
  299  *       artist-sort="Beatles, The".
  300  *
  301  * -  Demuxers attempt to export metadata in a generic format, however tags
  302  *    with no generic equivalents are left as they are stored in the container.
  303  *    Follows a list of generic tag names:
  304  *
  305  @verbatim
  306  album        -- name of the set this work belongs to
  307  album_artist -- main creator of the set/album, if different from artist.
  308                  e.g. "Various Artists" for compilation albums.
  309  artist       -- main creator of the work
  310  comment      -- any additional description of the file.
  311  composer     -- who composed the work, if different from artist.
  312  copyright    -- name of copyright holder.
  313  creation_time-- date when the file was created, preferably in ISO 8601.
  314  date         -- date when the work was created, preferably in ISO 8601.
  315  disc         -- number of a subset, e.g. disc in a multi-disc collection.
  316  encoder      -- name/settings of the software/hardware that produced the file.
  317  encoded_by   -- person/group who created the file.
  318  filename     -- original name of the file.
  319  genre        -- <self-evident>.
  320  language     -- main language in which the work is performed, preferably
  321                  in ISO 639-2 format. Multiple languages can be specified by
  322                  separating them with commas.
  323  performer    -- artist who performed the work, if different from artist.
  324                  E.g for "Also sprach Zarathustra", artist would be "Richard
  325                  Strauss" and performer "London Philharmonic Orchestra".
  326  publisher    -- name of the label/publisher.
  327  service_name     -- name of the service in broadcasting (channel name).
  328  service_provider -- name of the service provider in broadcasting.
  329  title        -- name of the work.
  330  track        -- number of this work in the set, can be in form current/total.
  331  variant_bitrate -- the total bitrate of the bitrate variant that the current stream is part of
  332  @endverbatim
  333  *
  334  * Look in the examples section for an application example how to use the Metadata API.
  335  *
  336  * @}
  337  */
  338 
  339 /* packet functions */
  340 
  341 
  342 /**
  343  * Allocate and read the payload of a packet and initialize its
  344  * fields with default values.
  345  *
  346  * @param s    associated IO context
  347  * @param pkt packet
  348  * @param size desired payload size
  349  * @return >0 (read size) if OK, AVERROR_xxx otherwise
  350  */
  351 int av_get_packet(AVIOContext *s, AVPacket *pkt, int size);
  352 
  353 
  354 /**
  355  * Read data and append it to the current content of the AVPacket.
  356  * If pkt->size is 0 this is identical to av_get_packet.
  357  * Note that this uses av_grow_packet and thus involves a realloc
  358  * which is inefficient. Thus this function should only be used
  359  * when there is no reasonable way to know (an upper bound of)
  360  * the final size.
  361  *
  362  * @param s    associated IO context
  363  * @param pkt packet
  364  * @param size amount of data to read
  365  * @return >0 (read size) if OK, AVERROR_xxx otherwise, previous data
  366  *         will not be lost even if an error occurs.
  367  */
  368 int av_append_packet(AVIOContext *s, AVPacket *pkt, int size);
  369 
  370 /*************************************************/
  371 /* fractional numbers for exact pts handling */
  372 
  373 /**
  374  * The exact value of the fractional number is: 'val + num / den'.
  375  * num is assumed to be 0 <= num < den.
  376  */
  377 typedef struct AVFrac {
  378     int64_t val, num, den;
  379 } AVFrac;
  380 
  381 /*************************************************/
  382 /* input/output formats */
  383 
  384 struct AVCodecTag;
  385 
  386 /**
  387  * This structure contains the data a format has to probe a file.
  388  */
  389 typedef struct AVProbeData {
  390     const char *filename;
  391     unsigned char *buf; /**< Buffer must have AVPROBE_PADDING_SIZE of extra allocated bytes filled with zero. */
  392     int buf_size;       /**< Size of buf except extra allocated bytes */
  393 } AVProbeData;
  394 
  395 #define AVPROBE_SCORE_RETRY (AVPROBE_SCORE_MAX/4)
  396 #define AVPROBE_SCORE_STREAM_RETRY (AVPROBE_SCORE_MAX/4-1)
  397 
  398 #define AVPROBE_SCORE_EXTENSION  50 ///< score for file extension
  399 #define AVPROBE_SCORE_MAX       100 ///< maximum score
  400 
  401 #define AVPROBE_PADDING_SIZE 32             ///< extra allocated bytes at the end of the probe buffer
  402 
  403 /// Demuxer will use avio_open, no opened file should be provided by the caller.
  404 #define AVFMT_NOFILE        0x0001
  405 #define AVFMT_NEEDNUMBER    0x0002 /**< Needs '%d' in filename. */
  406 #define AVFMT_SHOW_IDS      0x0008 /**< Show format stream IDs numbers. */
  407 #define AVFMT_RAWPICTURE    0x0020 /**< Format wants AVPicture structure for
  408                                       raw picture data. */
  409 #define AVFMT_GLOBALHEADER  0x0040 /**< Format wants global header. */
  410 #define AVFMT_NOTIMESTAMPS  0x0080 /**< Format does not need / have any timestamps. */
  411 #define AVFMT_GENERIC_INDEX 0x0100 /**< Use generic index building code. */
  412 #define AVFMT_TS_DISCONT    0x0200 /**< Format allows timestamp discontinuities. Note, muxers always require valid (monotone) timestamps */
  413 #define AVFMT_VARIABLE_FPS  0x0400 /**< Format allows variable fps. */
  414 #define AVFMT_NODIMENSIONS  0x0800 /**< Format does not need width/height */
  415 #define AVFMT_NOSTREAMS     0x1000 /**< Format does not require any streams */
  416 #define AVFMT_NOBINSEARCH   0x2000 /**< Format does not allow to fall back on binary search via read_timestamp */
  417 #define AVFMT_NOGENSEARCH   0x4000 /**< Format does not allow to fall back on generic search */
  418 #define AVFMT_NO_BYTE_SEEK  0x8000 /**< Format does not allow seeking by bytes */
  419 #define AVFMT_ALLOW_FLUSH  0x10000 /**< Format allows flushing. If not set, the muxer will not receive a NULL packet in the write_packet function. */
  420 #if LIBAVFORMAT_VERSION_MAJOR <= 54
  421 #define AVFMT_TS_NONSTRICT 0x8020000 //we try to be compatible to the ABIs of ffmpeg and major forks
  422 #else
  423 #define AVFMT_TS_NONSTRICT 0x20000
  424 #endif
  425                                    /**< Format does not require strictly
  426                                         increasing timestamps, but they must
  427                                         still be monotonic */
  428 #define AVFMT_TS_NEGATIVE  0x40000 /**< Format allows muxing negative
  429                                         timestamps. If not set the timestamp
  430                                         will be shifted in av_write_frame and
  431                                         av_interleaved_write_frame so they
  432                                         start from 0.
  433                                         The user or muxer can override this through
  434                                         AVFormatContext.avoid_negative_ts
  435                                         */
  436 
  437 #define AVFMT_SEEK_TO_PTS   0x4000000 /**< Seeking is based on PTS */
  438 
  439 /**
  440  * @addtogroup lavf_encoding
  441  * @{
  442  */
  443 typedef struct AVOutputFormat {
  444     const char *name;
  445     /**
  446      * Descriptive name for the format, meant to be more human-readable
  447      * than name. You should use the NULL_IF_CONFIG_SMALL() macro
  448      * to define it.
  449      */
  450     const char *long_name;
  451     const char *mime_type;
  452     const char *extensions; /**< comma-separated filename extensions */
  453     /* output support */
  454     enum AVCodecID audio_codec;    /**< default audio codec */
  455     enum AVCodecID video_codec;    /**< default video codec */
  456     enum AVCodecID subtitle_codec; /**< default subtitle codec */
  457     /**
  458      * can use flags: AVFMT_NOFILE, AVFMT_NEEDNUMBER, AVFMT_RAWPICTURE,
  459      * AVFMT_GLOBALHEADER, AVFMT_NOTIMESTAMPS, AVFMT_VARIABLE_FPS,
  460      * AVFMT_NODIMENSIONS, AVFMT_NOSTREAMS, AVFMT_ALLOW_FLUSH,
  461      * AVFMT_TS_NONSTRICT
  462      */
  463     int flags;
  464 
  465     /**
  466      * List of supported codec_id-codec_tag pairs, ordered by "better
  467      * choice first". The arrays are all terminated by AV_CODEC_ID_NONE.
  468      */
  469     const struct AVCodecTag * const *codec_tag;
  470 
  471 
  472     const AVClass *priv_class; ///< AVClass for the private context
  473 
  474     /*****************************************************************
  475      * No fields below this line are part of the public API. They
  476      * may not be used outside of libavformat and can be changed and
  477      * removed at will.
  478      * New public fields should be added right above.
  479      *****************************************************************
  480      */
  481     struct AVOutputFormat *next;
  482     /**
  483      * size of private data so that it can be allocated in the wrapper
  484      */
  485     int priv_data_size;
  486 
  487     int (*write_header)(struct AVFormatContext *);
  488     /**
  489      * Write a packet. If AVFMT_ALLOW_FLUSH is set in flags,
  490      * pkt can be NULL in order to flush data buffered in the muxer.
  491      * When flushing, return 0 if there still is more data to flush,
  492      * or 1 if everything was flushed and there is no more buffered
  493      * data.
  494      */
  495     int (*write_packet)(struct AVFormatContext *, AVPacket *pkt);
  496     int (*write_trailer)(struct AVFormatContext *);
  497     /**
  498      * Currently only used to set pixel format if not YUV420P.
  499      */
  500     int (*interleave_packet)(struct AVFormatContext *, AVPacket *out,
  501                              AVPacket *in, int flush);
  502     /**
  503      * Test if the given codec can be stored in this container.
  504      *
  505      * @return 1 if the codec is supported, 0 if it is not.
  506      *         A negative number if unknown.
  507      *         MKTAG('A', 'P', 'I', 'C') if the codec is only supported as AV_DISPOSITION_ATTACHED_PIC
  508      */
  509     int (*query_codec)(enum AVCodecID id, int std_compliance);
  510 
  511     void (*get_output_timestamp)(struct AVFormatContext *s, int stream,
  512                                  int64_t *dts, int64_t *wall);
  513     /**
  514      * Allows sending messages from application to device.
  515      */
  516     int (*control_message)(struct AVFormatContext *s, int type,
  517                            void *data, size_t data_size);
  518 
  519     /**
  520      * Write an uncoded AVFrame.
  521      *
  522      * See av_write_uncoded_frame() for details.
  523      *
  524      * The library will free *frame afterwards, but the muxer can prevent it
  525      * by setting the pointer to NULL.
  526      */
  527     int (*write_uncoded_frame)(struct AVFormatContext *, int stream_index,
  528                                AVFrame **frame, unsigned flags);
  529     /**
  530      * Returns device list with it properties.
  531      * @see avdevice_list_devices() for more details.
  532      */
  533     int (*get_device_list)(struct AVFormatContext *s, struct AVDeviceInfoList *device_list);
  534 } AVOutputFormat;
  535 /**
  536  * @}
  537  */
  538 
  539 /**
  540  * @addtogroup lavf_decoding
  541  * @{
  542  */
  543 typedef struct AVInputFormat {
  544     /**
  545      * A comma separated list of short names for the format. New names
  546      * may be appended with a minor bump.
  547      */
  548     const char *name;
  549 
  550     /**
  551      * Descriptive name for the format, meant to be more human-readable
  552      * than name. You should use the NULL_IF_CONFIG_SMALL() macro
  553      * to define it.
  554      */
  555     const char *long_name;
  556 
  557     /**
  558      * Can use flags: AVFMT_NOFILE, AVFMT_NEEDNUMBER, AVFMT_SHOW_IDS,
  559      * AVFMT_GENERIC_INDEX, AVFMT_TS_DISCONT, AVFMT_NOBINSEARCH,
  560      * AVFMT_NOGENSEARCH, AVFMT_NO_BYTE_SEEK, AVFMT_SEEK_TO_PTS.
  561      */
  562     int flags;
  563 
  564     /**
  565      * If extensions are defined, then no probe is done. You should
  566      * usually not use extension format guessing because it is not
  567      * reliable enough
  568      */
  569     const char *extensions;
  570 
  571     const struct AVCodecTag * const *codec_tag;
  572 
  573     const AVClass *priv_class; ///< AVClass for the private context
  574 
  575     /*****************************************************************
  576      * No fields below this line are part of the public API. They
  577      * may not be used outside of libavformat and can be changed and
  578      * removed at will.
  579      * New public fields should be added right above.
  580      *****************************************************************
  581      */
  582     struct AVInputFormat *next;
  583 
  584     /**
  585      * Raw demuxers store their codec ID here.
  586      */
  587     int raw_codec_id;
  588 
  589     /**
  590      * Size of private data so that it can be allocated in the wrapper.
  591      */
  592     int priv_data_size;
  593 
  594     /**
  595      * Tell if a given file has a chance of being parsed as this format.
  596      * The buffer provided is guaranteed to be AVPROBE_PADDING_SIZE bytes
  597      * big so you do not have to check for that unless you need more.
  598      */
  599     int (*read_probe)(AVProbeData *);
  600 
  601     /**
  602      * Read the format header and initialize the AVFormatContext
  603      * structure. Return 0 if OK. Only used in raw format right
  604      * now. 'avformat_new_stream' should be called to create new streams.
  605      */
  606     int (*read_header)(struct AVFormatContext *);
  607 
  608     /**
  609      * Read one packet and put it in 'pkt'. pts and flags are also
  610      * set. 'avformat_new_stream' can be called only if the flag
  611      * AVFMTCTX_NOHEADER is used and only in the calling thread (not in a
  612      * background thread).
  613      * @return 0 on success, < 0 on error.
  614      *         When returning an error, pkt must not have been allocated
  615      *         or must be freed before returning
  616      */
  617     int (*read_packet)(struct AVFormatContext *, AVPacket *pkt);
  618 
  619     /**
  620      * Close the stream. The AVFormatContext and AVStreams are not
  621      * freed by this function
  622      */
  623     int (*read_close)(struct AVFormatContext *);
  624 
  625     /**
  626      * Seek to a given timestamp relative to the frames in
  627      * stream component stream_index.
  628      * @param stream_index Must not be -1.
  629      * @param flags Selects which direction should be preferred if no exact
  630      *              match is available.
  631      * @return >= 0 on success (but not necessarily the new offset)
  632      */
  633     int (*read_seek)(struct AVFormatContext *,
  634                      int stream_index, int64_t timestamp, int flags);
  635 
  636     /**
  637      * Get the next timestamp in stream[stream_index].time_base units.
  638      * @return the timestamp or AV_NOPTS_VALUE if an error occurred
  639      */
  640     int64_t (*read_timestamp)(struct AVFormatContext *s, int stream_index,
  641                               int64_t *pos, int64_t pos_limit);
  642 
  643     /**
  644      * Start/resume playing - only meaningful if using a network-based format
  645      * (RTSP).
  646      */
  647     int (*read_play)(struct AVFormatContext *);
  648 
  649     /**
  650      * Pause playing - only meaningful if using a network-based format
  651      * (RTSP).
  652      */
  653     int (*read_pause)(struct AVFormatContext *);
  654 
  655     /**
  656      * Seek to timestamp ts.
  657      * Seeking will be done so that the point from which all active streams
  658      * can be presented successfully will be closest to ts and within min/max_ts.
  659      * Active streams are all streams that have AVStream.discard < AVDISCARD_ALL.
  660      */
  661     int (*read_seek2)(struct AVFormatContext *s, int stream_index, int64_t min_ts, int64_t ts, int64_t max_ts, int flags);
  662 
  663     /**
  664      * Returns device list with it properties.
  665      * @see avdevice_list_devices() for more details.
  666      */
  667     int (*get_device_list)(struct AVFormatContext *s, struct AVDeviceInfoList *device_list);
  668 } AVInputFormat;
  669 /**
  670  * @}
  671  */
  672 
  673 enum AVStreamParseType {
  674     AVSTREAM_PARSE_NONE,
  675     AVSTREAM_PARSE_FULL,       /**< full parsing and repack */
  676     AVSTREAM_PARSE_HEADERS,    /**< Only parse headers, do not repack. */
  677     AVSTREAM_PARSE_TIMESTAMPS, /**< full parsing and interpolation of timestamps for frames not starting on a packet boundary */
  678     AVSTREAM_PARSE_FULL_ONCE,  /**< full parsing and repack of the first frame only, only implemented for H.264 currently */
  679     AVSTREAM_PARSE_FULL_RAW=MKTAG(0,'R','A','W'),       /**< full parsing and repack with timestamp and position generation by parser for raw
  680                                                              this assumes that each packet in the file contains no demuxer level headers and
  681                                                              just codec level data, otherwise position generation would fail */
  682 };
  683 
  684 typedef struct AVIndexEntry {
  685     int64_t pos;
  686     int64_t timestamp;        /**<
  687                                * Timestamp in AVStream.time_base units, preferably the time from which on correctly decoded frames are available
  688                                * when seeking to this entry. That means preferable PTS on keyframe based formats.
  689                                * But demuxers can choose to store a different timestamp, if it is more convenient for the implementation or nothing better
  690                                * is known
  691                                */
  692 #define AVINDEX_KEYFRAME 0x0001
  693     int flags:2;
  694     int size:30; //Yeah, trying to keep the size of this small to reduce memory requirements (it is 24 vs. 32 bytes due to possible 8-byte alignment).
  695     int min_distance;         /**< Minimum distance between this and the previous keyframe, used to avoid unneeded searching. */
  696 } AVIndexEntry;
  697 
  698 #define AV_DISPOSITION_DEFAULT   0x0001
  699 #define AV_DISPOSITION_DUB       0x0002
  700 #define AV_DISPOSITION_ORIGINAL  0x0004
  701 #define AV_DISPOSITION_COMMENT   0x0008
  702 #define AV_DISPOSITION_LYRICS    0x0010
  703 #define AV_DISPOSITION_KARAOKE   0x0020
  704 
  705 /**
  706  * Track should be used during playback by default.
  707  * Useful for subtitle track that should be displayed
  708  * even when user did not explicitly ask for subtitles.
  709  */
  710 #define AV_DISPOSITION_FORCED    0x0040
  711 #define AV_DISPOSITION_HEARING_IMPAIRED  0x0080  /**< stream for hearing impaired audiences */
  712 #define AV_DISPOSITION_VISUAL_IMPAIRED   0x0100  /**< stream for visual impaired audiences */
  713 #define AV_DISPOSITION_CLEAN_EFFECTS     0x0200  /**< stream without voice */
  714 /**
  715  * The stream is stored in the file as an attached picture/"cover art" (e.g.
  716  * APIC frame in ID3v2). The single packet associated with it will be returned
  717  * among the first few packets read from the file unless seeking takes place.
  718  * It can also be accessed at any time in AVStream.attached_pic.
  719  */
  720 #define AV_DISPOSITION_ATTACHED_PIC      0x0400
  721 
  722 /**
  723  * To specify text track kind (different from subtitles default).
  724  */
  725 #define AV_DISPOSITION_CAPTIONS     0x10000
  726 #define AV_DISPOSITION_DESCRIPTIONS 0x20000
  727 #define AV_DISPOSITION_METADATA     0x40000
  728 
  729 /**
  730  * Options for behavior on timestamp wrap detection.
  731  */
  732 #define AV_PTS_WRAP_IGNORE      0   ///< ignore the wrap
  733 #define AV_PTS_WRAP_ADD_OFFSET  1   ///< add the format specific offset on wrap detection
  734 #define AV_PTS_WRAP_SUB_OFFSET  -1  ///< subtract the format specific offset on wrap detection
  735 
  736 /**
  737  * Stream structure.
  738  * New fields can be added to the end with minor version bumps.
  739  * Removal, reordering and changes to existing fields require a major
  740  * version bump.
  741  * sizeof(AVStream) must not be used outside libav*.
  742  */
  743 typedef struct AVStream {
  744     int index;    /**< stream index in AVFormatContext */
  745     /**
  746      * Format-specific stream ID.
  747      * decoding: set by libavformat
  748      * encoding: set by the user, replaced by libavformat if left unset
  749      */
  750     int id;
  751     /**
  752      * Codec context associated with this stream. Allocated and freed by
  753      * libavformat.
  754      *
  755      * - decoding: The demuxer exports codec information stored in the headers
  756      *             here.
  757      * - encoding: The user sets codec information, the muxer writes it to the
  758      *             output. Mandatory fields as specified in AVCodecContext
  759      *             documentation must be set even if this AVCodecContext is
  760      *             not actually used for encoding.
  761      */
  762     AVCodecContext *codec;
  763     void *priv_data;
  764 
  765     /**
  766      * encoding: pts generation when outputting stream
  767      */
  768     struct AVFrac pts;
  769 
  770     /**
  771      * This is the fundamental unit of time (in seconds) in terms
  772      * of which frame timestamps are represented.
  773      *
  774      * decoding: set by libavformat
  775      * encoding: set by libavformat in avformat_write_header. The muxer may use the
  776      * user-provided value of @ref AVCodecContext.time_base "codec->time_base"
  777      * as a hint.
  778      */
  779     AVRational time_base;
  780 
  781     /**
  782      * Decoding: pts of the first frame of the stream in presentation order, in stream time base.
  783      * Only set this if you are absolutely 100% sure that the value you set
  784      * it to really is the pts of the first frame.
  785      * This may be undefined (AV_NOPTS_VALUE).
  786      * @note The ASF header does NOT contain a correct start_time the ASF
  787      * demuxer must NOT set this.
  788      */
  789     int64_t start_time;
  790 
  791     /**
  792      * Decoding: duration of the stream, in stream time base.
  793      * If a source file does not specify a duration, but does specify
  794      * a bitrate, this value will be estimated from bitrate and file size.
  795      */
  796     int64_t duration;
  797 
  798     int64_t nb_frames;                 ///< number of frames in this stream if known or 0
  799 
  800     int disposition; /**< AV_DISPOSITION_* bit field */
  801 
  802     enum AVDiscard discard; ///< Selects which packets can be discarded at will and do not need to be demuxed.
  803 
  804     /**
  805      * sample aspect ratio (0 if unknown)
  806      * - encoding: Set by user.
  807      * - decoding: Set by libavformat.
  808      */
  809     AVRational sample_aspect_ratio;
  810 
  811     AVDictionary *metadata;
  812 
  813     /**
  814      * Average framerate
  815      */
  816     AVRational avg_frame_rate;
  817 
  818     /**
  819      * For streams with AV_DISPOSITION_ATTACHED_PIC disposition, this packet
  820      * will contain the attached picture.
  821      *
  822      * decoding: set by libavformat, must not be modified by the caller.
  823      * encoding: unused
  824      */
  825     AVPacket attached_pic;
  826 
  827     /*****************************************************************
  828      * All fields below this line are not part of the public API. They
  829      * may not be used outside of libavformat and can be changed and
  830      * removed at will.
  831      * New public fields should be added right above.
  832      *****************************************************************
  833      */
  834 
  835     /**
  836      * Stream information used internally by av_find_stream_info()
  837      */
  838 #define MAX_STD_TIMEBASES (60*12+6)
  839     struct {
  840         int64_t last_dts;
  841         int64_t duration_gcd;
  842         int duration_count;
  843         int64_t rfps_duration_sum;
  844         double (*duration_error)[2][MAX_STD_TIMEBASES];
  845         int64_t codec_info_duration;
  846         int64_t codec_info_duration_fields;
  847         int found_decoder;
  848 
  849         int64_t last_duration;
  850 
  851         /**
  852          * Those are used for average framerate estimation.
  853          */
  854         int64_t fps_first_dts;
  855         int     fps_first_dts_idx;
  856         int64_t fps_last_dts;
  857         int     fps_last_dts_idx;
  858 
  859     } *info;
  860 
  861     int pts_wrap_bits; /**< number of bits in pts (used for wrapping control) */
  862 
  863 #if FF_API_REFERENCE_DTS
  864     /* a hack to keep ABI compatibility for ffmpeg and other applications, which accesses parser even
  865      * though it should not */
  866     int64_t do_not_use;
  867 #endif
  868     // Timestamp generation support:
  869     /**
  870      * Timestamp corresponding to the last dts sync point.
  871      *
  872      * Initialized when AVCodecParserContext.dts_sync_point >= 0 and
  873      * a DTS is received from the underlying container. Otherwise set to
  874      * AV_NOPTS_VALUE by default.
  875      */
  876     int64_t first_dts;
  877     int64_t cur_dts;
  878     int64_t last_IP_pts;
  879     int last_IP_duration;
  880 
  881     /**
  882      * Number of packets to buffer for codec probing
  883      */
  884 #define MAX_PROBE_PACKETS 2500
  885     int probe_packets;
  886 
  887     /**
  888      * Number of frames that have been demuxed during av_find_stream_info()
  889      */
  890     int codec_info_nb_frames;
  891 
  892     /* av_read_frame() support */
  893     enum AVStreamParseType need_parsing;
  894     struct AVCodecParserContext *parser;
  895 
  896     /**
  897      * last packet in packet_buffer for this stream when muxing.
  898      */
  899     struct AVPacketList *last_in_packet_buffer;
  900     AVProbeData probe_data;
  901 #define MAX_REORDER_DELAY 16
  902     int64_t pts_buffer[MAX_REORDER_DELAY+1];
  903 
  904     AVIndexEntry *index_entries; /**< Only used if the format does not
  905                                     support seeking natively. */
  906     int nb_index_entries;
  907     unsigned int index_entries_allocated_size;
  908 
  909     /**
  910      * Real base framerate of the stream.
  911      * This is the lowest framerate with which all timestamps can be
  912      * represented accurately (it is the least common multiple of all
  913      * framerates in the stream). Note, this value is just a guess!
  914      * For example, if the time base is 1/90000 and all frames have either
  915      * approximately 3600 or 1800 timer ticks, then r_frame_rate will be 50/1.
  916      *
  917      * Code outside avformat should access this field using:
  918      * av_stream_get/set_r_frame_rate(stream)
  919      */
  920     AVRational r_frame_rate;
  921 
  922     /**
  923      * Stream Identifier
  924      * This is the MPEG-TS stream identifier +1
  925      * 0 means unknown
  926      */
  927     int stream_identifier;
  928 
  929     int64_t interleaver_chunk_size;
  930     int64_t interleaver_chunk_duration;
  931 
  932     /**
  933      * stream probing state
  934      * -1   -> probing finished
  935      *  0   -> no probing requested
  936      * rest -> perform probing with request_probe being the minimum score to accept.
  937      * NOT PART OF PUBLIC API
  938      */
  939     int request_probe;
  940     /**
  941      * Indicates that everything up to the next keyframe
  942      * should be discarded.
  943      */
  944     int skip_to_keyframe;
  945 
  946     /**
  947      * Number of samples to skip at the start of the frame decoded from the next packet.
  948      */
  949     int skip_samples;
  950 
  951     /**
  952      * Number of internally decoded frames, used internally in libavformat, do not access
  953      * its lifetime differs from info which is why it is not in that structure.
  954      */
  955     int nb_decoded_frames;
  956 
  957     /**
  958      * Timestamp offset added to timestamps before muxing
  959      * NOT PART OF PUBLIC API
  960      */
  961     int64_t mux_ts_offset;
  962 
  963     /**
  964      * Internal data to check for wrapping of the time stamp
  965      */
  966     int64_t pts_wrap_reference;
  967 
  968     /**
  969      * Options for behavior, when a wrap is detected.
  970      *
  971      * Defined by AV_PTS_WRAP_ values.
  972      *
  973      * If correction is enabled, there are two possibilities:
  974      * If the first time stamp is near the wrap point, the wrap offset
  975      * will be subtracted, which will create negative time stamps.
  976      * Otherwise the offset will be added.
  977      */
  978     int pts_wrap_behavior;
  979 
  980     /**
  981      * Internal data to prevent doing update_initial_durations() twice
  982      */
  983     int update_initial_durations_done;
  984 
  985     /**
  986      * Internal data to generate dts from pts
  987      */
  988     int64_t pts_reorder_error[MAX_REORDER_DELAY+1];
  989     uint8_t pts_reorder_error_count[MAX_REORDER_DELAY+1];
  990 
  991     /**
  992      * Internal data to analyze DTS and detect faulty mpeg streams
  993      */
  994     int64_t last_dts_for_order_check;
  995     uint8_t dts_ordered;
  996     uint8_t dts_misordered;
  997 
  998 } AVStream;
  999 
 1000 AVRational av_stream_get_r_frame_rate(const AVStream *s);
 1001 void       av_stream_set_r_frame_rate(AVStream *s, AVRational r);
 1002 
 1003 #define AV_PROGRAM_RUNNING 1
 1004 
 1005 /**
 1006  * New fields can be added to the end with minor version bumps.
 1007  * Removal, reordering and changes to existing fields require a major
 1008  * version bump.
 1009  * sizeof(AVProgram) must not be used outside libav*.
 1010  */
 1011 typedef struct AVProgram {
 1012     int            id;
 1013     int            flags;
 1014     enum AVDiscard discard;        ///< selects which program to discard and which to feed to the caller
 1015     unsigned int   *stream_index;
 1016     unsigned int   nb_stream_indexes;
 1017     AVDictionary *metadata;
 1018 
 1019     int program_num;
 1020     int pmt_pid;
 1021     int pcr_pid;
 1022 
 1023     /*****************************************************************
 1024      * All fields below this line are not part of the public API. They
 1025      * may not be used outside of libavformat and can be changed and
 1026      * removed at will.
 1027      * New public fields should be added right above.
 1028      *****************************************************************
 1029      */
 1030     int64_t start_time;
 1031     int64_t end_time;
 1032 
 1033     int64_t pts_wrap_reference;    ///< reference dts for wrap detection
 1034     int pts_wrap_behavior;         ///< behavior on wrap detection
 1035 } AVProgram;
 1036 
 1037 #define AVFMTCTX_NOHEADER      0x0001 /**< signal that no header is present
 1038                                          (streams are added dynamically) */
 1039 
 1040 typedef struct AVChapter {
 1041     int id;                 ///< unique ID to identify the chapter
 1042     AVRational time_base;   ///< time base in which the start/end timestamps are specified
 1043     int64_t start, end;     ///< chapter start/end time in time_base units
 1044     AVDictionary *metadata;
 1045 } AVChapter;
 1046 
 1047 
 1048 /**
 1049  * Callback used by devices to communicate with application.
 1050  */
 1051 typedef int (*av_format_control_message)(struct AVFormatContext *s, int type,
 1052                                          void *data, size_t data_size);
 1053 
 1054 
 1055 /**
 1056  * The duration of a video can be estimated through various ways, and this enum can be used
 1057  * to know how the duration was estimated.
 1058  */
 1059 enum AVDurationEstimationMethod {
 1060     AVFMT_DURATION_FROM_PTS,    ///< Duration accurately estimated from PTSes
 1061     AVFMT_DURATION_FROM_STREAM, ///< Duration estimated from a stream with a known duration
 1062     AVFMT_DURATION_FROM_BITRATE ///< Duration estimated from bitrate (less accurate)
 1063 };
 1064 
 1065 typedef struct AVFormatInternal AVFormatInternal;
 1066 
 1067 /**
 1068  * Format I/O context.
 1069  * New fields can be added to the end with minor version bumps.
 1070  * Removal, reordering and changes to existing fields require a major
 1071  * version bump.
 1072  * sizeof(AVFormatContext) must not be used outside libav*, use
 1073  * avformat_alloc_context() to create an AVFormatContext.
 1074  */
 1075 typedef struct AVFormatContext {
 1076     /**
 1077      * A class for logging and @ref avoptions. Set by avformat_alloc_context().
 1078      * Exports (de)muxer private options if they exist.
 1079      */
 1080     const AVClass *av_class;
 1081 
 1082     /**
 1083      * The input container format.
 1084      *
 1085      * Demuxing only, set by avformat_open_input().
 1086      */
 1087     struct AVInputFormat *iformat;
 1088 
 1089     /**
 1090      * The output container format.
 1091      *
 1092      * Muxing only, must be set by the caller before avformat_write_header().
 1093      */
 1094     struct AVOutputFormat *oformat;
 1095 
 1096     /**
 1097      * Format private data. This is an AVOptions-enabled struct
 1098      * if and only if iformat/oformat.priv_class is not NULL.
 1099      *
 1100      * - muxing: set by avformat_write_header()
 1101      * - demuxing: set by avformat_open_input()
 1102      */
 1103     void *priv_data;
 1104 
 1105     /**
 1106      * I/O context.
 1107      *
 1108      * - demuxing: either set by the user before avformat_open_input() (then
 1109      *             the user must close it manually) or set by avformat_open_input().
 1110      * - muxing: set by the user before avformat_write_header(). The caller must
 1111      *           take care of closing / freeing the IO context.
 1112      *
 1113      * Do NOT set this field if AVFMT_NOFILE flag is set in
 1114      * iformat/oformat.flags. In such a case, the (de)muxer will handle
 1115      * I/O in some other way and this field will be NULL.
 1116      */
 1117     AVIOContext *pb;
 1118 
 1119     /* stream info */
 1120     int ctx_flags; /**< Format-specific flags, see AVFMTCTX_xx */
 1121 
 1122     /**
 1123      * Number of elements in AVFormatContext.streams.
 1124      *
 1125      * Set by avformat_new_stream(), must not be modified by any other code.
 1126      */
 1127     unsigned int nb_streams;
 1128     /**
 1129      * A list of all streams in the file. New streams are created with
 1130      * avformat_new_stream().
 1131      *
 1132      * - demuxing: streams are created by libavformat in avformat_open_input().
 1133      *             If AVFMTCTX_NOHEADER is set in ctx_flags, then new streams may also
 1134      *             appear in av_read_frame().
 1135      * - muxing: streams are created by the user before avformat_write_header().
 1136      *
 1137      * Freed by libavformat in avformat_free_context().
 1138      */
 1139     AVStream **streams;
 1140 
 1141     /**
 1142      * input or output filename
 1143      *
 1144      * - demuxing: set by avformat_open_input()
 1145      * - muxing: may be set by the caller before avformat_write_header()
 1146      */
 1147     char filename[1024];
 1148 
 1149     /**
 1150      * Position of the first frame of the component, in
 1151      * AV_TIME_BASE fractional seconds. NEVER set this value directly:
 1152      * It is deduced from the AVStream values.
 1153      *
 1154      * Demuxing only, set by libavformat.
 1155      */
 1156     int64_t start_time;
 1157 
 1158     /**
 1159      * Duration of the stream, in AV_TIME_BASE fractional
 1160      * seconds. Only set this value if you know none of the individual stream
 1161      * durations and also do not set any of them. This is deduced from the
 1162      * AVStream values if not set.
 1163      *
 1164      * Demuxing only, set by libavformat.
 1165      */
 1166     int64_t duration;
 1167 
 1168     /**
 1169      * Total stream bitrate in bit/s, 0 if not
 1170      * available. Never set it directly if the file_size and the
 1171      * duration are known as FFmpeg can compute it automatically.
 1172      */
 1173     int bit_rate;
 1174 
 1175     unsigned int packet_size;
 1176     int max_delay;
 1177 
 1178     int flags;
 1179 #define AVFMT_FLAG_GENPTS       0x0001 ///< Generate missing pts even if it requires parsing future frames.
 1180 #define AVFMT_FLAG_IGNIDX       0x0002 ///< Ignore index.
 1181 #define AVFMT_FLAG_NONBLOCK     0x0004 ///< Do not block when reading packets from input.
 1182 #define AVFMT_FLAG_IGNDTS       0x0008 ///< Ignore DTS on frames that contain both DTS & PTS
 1183 #define AVFMT_FLAG_NOFILLIN     0x0010 ///< Do not infer any values from other values, just return what is stored in the container
 1184 #define AVFMT_FLAG_NOPARSE      0x0020 ///< Do not use AVParsers, you also must set AVFMT_FLAG_NOFILLIN as the fillin code works on frames and no parsing -> no frames. Also seeking to frames can not work if parsing to find frame boundaries has been disabled
 1185 #define AVFMT_FLAG_NOBUFFER     0x0040 ///< Do not buffer frames when possible
 1186 #define AVFMT_FLAG_CUSTOM_IO    0x0080 ///< The caller has supplied a custom AVIOContext, don't avio_close() it.
 1187 #define AVFMT_FLAG_DISCARD_CORRUPT  0x0100 ///< Discard frames marked corrupted
 1188 #define AVFMT_FLAG_FLUSH_PACKETS    0x0200 ///< Flush the AVIOContext every packet.
 1189 #define AVFMT_FLAG_MP4A_LATM    0x8000 ///< Enable RTP MP4A-LATM payload
 1190 #define AVFMT_FLAG_SORT_DTS    0x10000 ///< try to interleave outputted packets by dts (using this flag can slow demuxing down)
 1191 #define AVFMT_FLAG_PRIV_OPT    0x20000 ///< Enable use of private options by delaying codec open (this could be made default once all code is converted)
 1192 #define AVFMT_FLAG_KEEP_SIDE_DATA 0x40000 ///< Don't merge side data but keep it separate.
 1193 
 1194     /**
 1195      * Maximum size of the data read from input for determining
 1196      * the input container format.
 1197      * Demuxing only, set by the caller before avformat_open_input().
 1198      */
 1199     unsigned int probesize;
 1200 
 1201     /**
 1202      * Maximum duration (in AV_TIME_BASE units) of the data read
 1203      * from input in avformat_find_stream_info().
 1204      * Demuxing only, set by the caller before avformat_find_stream_info().
 1205      */
 1206     int max_analyze_duration;
 1207 
 1208     const uint8_t *key;
 1209     int keylen;
 1210 
 1211     unsigned int nb_programs;
 1212     AVProgram **programs;
 1213 
 1214     /**
 1215      * Forced video codec_id.
 1216      * Demuxing: Set by user.
 1217      */
 1218     enum AVCodecID video_codec_id;
 1219 
 1220     /**
 1221      * Forced audio codec_id.
 1222      * Demuxing: Set by user.
 1223      */
 1224     enum AVCodecID audio_codec_id;
 1225 
 1226     /**
 1227      * Forced subtitle codec_id.
 1228      * Demuxing: Set by user.
 1229      */
 1230     enum AVCodecID subtitle_codec_id;
 1231 
 1232     /**
 1233      * Maximum amount of memory in bytes to use for the index of each stream.
 1234      * If the index exceeds this size, entries will be discarded as
 1235      * needed to maintain a smaller size. This can lead to slower or less
 1236      * accurate seeking (depends on demuxer).
 1237      * Demuxers for which a full in-memory index is mandatory will ignore
 1238      * this.
 1239      * - muxing: unused
 1240      * - demuxing: set by user
 1241      */
 1242     unsigned int max_index_size;
 1243 
 1244     /**
 1245      * Maximum amount of memory in bytes to use for buffering frames
 1246      * obtained from realtime capture devices.
 1247      */
 1248     unsigned int max_picture_buffer;
 1249 
 1250     /**
 1251      * Number of chapters in AVChapter array.
 1252      * When muxing, chapters are normally written in the file header,
 1253      * so nb_chapters should normally be initialized before write_header
 1254      * is called. Some muxers (e.g. mov and mkv) can also write chapters
 1255      * in the trailer.  To write chapters in the trailer, nb_chapters
 1256      * must be zero when write_header is called and non-zero when
 1257      * write_trailer is called.
 1258      * - muxing: set by user
 1259      * - demuxing: set by libavformat
 1260      */
 1261     unsigned int nb_chapters;
 1262     AVChapter **chapters;
 1263 
 1264     /**
 1265      * Metadata that applies to the whole file.
 1266      *
 1267      * - demuxing: set by libavformat in avformat_open_input()
 1268      * - muxing: may be set by the caller before avformat_write_header()
 1269      *
 1270      * Freed by libavformat in avformat_free_context().
 1271      */
 1272     AVDictionary *metadata;
 1273 
 1274     /**
 1275      * Start time of the stream in real world time, in microseconds
 1276      * since the Unix epoch (00:00 1st January 1970). That is, pts=0 in the
 1277      * stream was captured at this real world time.
 1278      * Muxing only, set by the caller before avformat_write_header().
 1279      */
 1280     int64_t start_time_realtime;
 1281 
 1282     /**
 1283      * The number of frames used for determining the framerate in
 1284      * avformat_find_stream_info().
 1285      * Demuxing only, set by the caller before avformat_find_stream_info().
 1286      */
 1287     int fps_probe_size;
 1288 
 1289     /**
 1290      * Error recognition; higher values will detect more errors but may
 1291      * misdetect some more or less valid parts as errors.
 1292      * Demuxing only, set by the caller before avformat_open_input().
 1293      */
 1294     int error_recognition;
 1295 
 1296     /**
 1297      * Custom interrupt callbacks for the I/O layer.
 1298      *
 1299      * demuxing: set by the user before avformat_open_input().
 1300      * muxing: set by the user before avformat_write_header()
 1301      * (mainly useful for AVFMT_NOFILE formats). The callback
 1302      * should also be passed to avio_open2() if it's used to
 1303      * open the file.
 1304      */
 1305     AVIOInterruptCB interrupt_callback;
 1306 
 1307     /**
 1308      * Flags to enable debugging.
 1309      */
 1310     int debug;
 1311 #define FF_FDEBUG_TS        0x0001
 1312 
 1313     /**
 1314      * Maximum buffering duration for interleaving.
 1315      *
 1316      * To ensure all the streams are interleaved correctly,
 1317      * av_interleaved_write_frame() will wait until it has at least one packet
 1318      * for each stream before actually writing any packets to the output file.
 1319      * When some streams are "sparse" (i.e. there are large gaps between
 1320      * successive packets), this can result in excessive buffering.
 1321      *
 1322      * This field specifies the maximum difference between the timestamps of the
 1323      * first and the last packet in the muxing queue, above which libavformat
 1324      * will output a packet regardless of whether it has queued a packet for all
 1325      * the streams.
 1326      *
 1327      * Muxing only, set by the caller before avformat_write_header().
 1328      */
 1329     int64_t max_interleave_delta;
 1330 
 1331     /**
 1332      * Transport stream id.
 1333      * This will be moved into demuxer private options. Thus no API/ABI compatibility
 1334      */
 1335     int ts_id;
 1336 
 1337     /**
 1338      * Audio preload in microseconds.
 1339      * Note, not all formats support this and unpredictable things may happen if it is used when not supported.
 1340      * - encoding: Set by user via AVOptions (NO direct access)
 1341      * - decoding: unused
 1342      */
 1343     int audio_preload;
 1344 
 1345     /**
 1346      * Max chunk time in microseconds.
 1347      * Note, not all formats support this and unpredictable things may happen if it is used when not supported.
 1348      * - encoding: Set by user via AVOptions (NO direct access)
 1349      * - decoding: unused
 1350      */
 1351     int max_chunk_duration;
 1352 
 1353     /**
 1354      * Max chunk size in bytes
 1355      * Note, not all formats support this and unpredictable things may happen if it is used when not supported.
 1356      * - encoding: Set by user via AVOptions (NO direct access)
 1357      * - decoding: unused
 1358      */
 1359     int max_chunk_size;
 1360 
 1361     /**
 1362      * forces the use of wallclock timestamps as pts/dts of packets
 1363      * This has undefined results in the presence of B frames.
 1364      * - encoding: unused
 1365      * - decoding: Set by user via AVOptions (NO direct access)
 1366      */
 1367     int use_wallclock_as_timestamps;
 1368 
 1369     /**
 1370      * Avoid negative timestamps during muxing.
 1371      *  0 -> allow negative timestamps
 1372      *  1 -> avoid negative timestamps
 1373      * -1 -> choose automatically (default)
 1374      * Note, this only works when interleave_packet_per_dts is in use.
 1375      * - encoding: Set by user via AVOptions (NO direct access)
 1376      * - decoding: unused
 1377      */
 1378     int avoid_negative_ts;
 1379 
 1380     /**
 1381      * avio flags, used to force AVIO_FLAG_DIRECT.
 1382      * - encoding: unused
 1383      * - decoding: Set by user via AVOptions (NO direct access)
 1384      */
 1385     int avio_flags;
 1386 
 1387     /**
 1388      * The duration field can be estimated through various ways, and this field can be used
 1389      * to know how the duration was estimated.
 1390      * - encoding: unused
 1391      * - decoding: Read by user via AVOptions (NO direct access)
 1392      */
 1393     enum AVDurationEstimationMethod duration_estimation_method;
 1394 
 1395     /**
 1396      * Skip initial bytes when opening stream
 1397      * - encoding: unused
 1398      * - decoding: Set by user via AVOptions (NO direct access)
 1399      */
 1400     unsigned int skip_initial_bytes;
 1401 
 1402     /**
 1403      * Correct single timestamp overflows
 1404      * - encoding: unused
 1405      * - decoding: Set by user via AVOptions (NO direct access)
 1406      */
 1407     unsigned int correct_ts_overflow;
 1408 
 1409     /**
 1410      * Force seeking to any (also non key) frames.
 1411      * - encoding: unused
 1412      * - decoding: Set by user via AVOptions (NO direct access)
 1413      */
 1414     int seek2any;
 1415 
 1416     /**
 1417      * Flush the I/O context after each packet.
 1418      * - encoding: Set by user via AVOptions (NO direct access)
 1419      * - decoding: unused
 1420      */
 1421     int flush_packets;
 1422 
 1423     /**
 1424      * format probing score.
 1425      * The maximal score is AVPROBE_SCORE_MAX, its set when the demuxer probes
 1426      * the format.
 1427      * - encoding: unused
 1428      * - decoding: set by avformat, read by user via av_format_get_probe_score() (NO direct access)
 1429      */
 1430     int probe_score;
 1431 
 1432     /*****************************************************************
 1433      * All fields below this line are not part of the public API. They
 1434      * may not be used outside of libavformat and can be changed and
 1435      * removed at will.
 1436      * New public fields should be added right above.
 1437      *****************************************************************
 1438      */
 1439 
 1440     /**
 1441      * This buffer is only needed when packets were already buffered but
 1442      * not decoded, for example to get the codec parameters in MPEG
 1443      * streams.
 1444      */
 1445     struct AVPacketList *packet_buffer;
 1446     struct AVPacketList *packet_buffer_end;
 1447 
 1448     /* av_seek_frame() support */
 1449     int64_t data_offset; /**< offset of the first packet */
 1450 
 1451     /**
 1452      * Raw packets from the demuxer, prior to parsing and decoding.
 1453      * This buffer is used for buffering packets until the codec can
 1454      * be identified, as parsing cannot be done without knowing the
 1455      * codec.
 1456      */
 1457     struct AVPacketList *raw_packet_buffer;
 1458     struct AVPacketList *raw_packet_buffer_end;
 1459     /**
 1460      * Packets split by the parser get queued here.
 1461      */
 1462     struct AVPacketList *parse_queue;
 1463     struct AVPacketList *parse_queue_end;
 1464     /**
 1465      * Remaining size available for raw_packet_buffer, in bytes.
 1466      */
 1467 #define RAW_PACKET_BUFFER_SIZE 2500000
 1468     int raw_packet_buffer_remaining_size;
 1469 
 1470     /**
 1471      * Offset to remap timestamps to be non-negative.
 1472      * Expressed in timebase units.
 1473      * @see AVStream.mux_ts_offset
 1474      */
 1475     int64_t offset;
 1476 
 1477     /**
 1478      * Timebase for the timestamp offset.
 1479      */
 1480     AVRational offset_timebase;
 1481 
 1482     /**
 1483      * An opaque field for libavformat internal usage.
 1484      * Must not be accessed in any way by callers.
 1485      */
 1486     AVFormatInternal *internal;
 1487 
 1488     /**
 1489      * IO repositioned flag.
 1490      * This is set by avformat when the underlaying IO context read pointer
 1491      * is repositioned, for example when doing byte based seeking.
 1492      * Demuxers can use the flag to detect such changes.
 1493      */
 1494     int io_repositioned;
 1495 
 1496     /**
 1497      * Forced video codec.
 1498      * This allows forcing a specific decoder, even when there are multiple with
 1499      * the same codec_id.
 1500      * Demuxing: Set by user via av_format_set_video_codec (NO direct access).
 1501      */
 1502     AVCodec *video_codec;
 1503 
 1504     /**
 1505      * Forced audio codec.
 1506      * This allows forcing a specific decoder, even when there are multiple with
 1507      * the same codec_id.
 1508      * Demuxing: Set by user via av_format_set_audio_codec (NO direct access).
 1509      */
 1510     AVCodec *audio_codec;
 1511 
 1512     /**
 1513      * Forced subtitle codec.
 1514      * This allows forcing a specific decoder, even when there are multiple with
 1515      * the same codec_id.
 1516      * Demuxing: Set by user via av_format_set_subtitle_codec (NO direct access).
 1517      */
 1518     AVCodec *subtitle_codec;
 1519 
 1520     /**
 1521      * Number of bytes to be written as padding in a metadata header.
 1522      * Demuxing: Unused.
 1523      * Muxing: Set by user via av_format_set_metadata_header_padding.
 1524      */
 1525     int metadata_header_padding;
 1526 
 1527     /**
 1528      * User data.
 1529      * This is a place for some private data of the user.
 1530      * Mostly usable with control_message_cb or any future callbacks in device's context.
 1531      */
 1532     void *opaque;
 1533 
 1534     /**
 1535      * Callback used by devices to communicate with application.
 1536      */
 1537     av_format_control_message control_message_cb;
 1538 
 1539     /**
 1540      * Output timestamp offset, in microseconds.
 1541      * Muxing: set by user via AVOptions (NO direct access)
 1542      */
 1543     int64_t output_ts_offset;
 1544 } AVFormatContext;
 1545 
 1546 int av_format_get_probe_score(const AVFormatContext *s);
 1547 AVCodec * av_format_get_video_codec(const AVFormatContext *s);
 1548 void      av_format_set_video_codec(AVFormatContext *s, AVCodec *c);
 1549 AVCodec * av_format_get_audio_codec(const AVFormatContext *s);
 1550 void      av_format_set_audio_codec(AVFormatContext *s, AVCodec *c);
 1551 AVCodec * av_format_get_subtitle_codec(const AVFormatContext *s);
 1552 void      av_format_set_subtitle_codec(AVFormatContext *s, AVCodec *c);
 1553 int       av_format_get_metadata_header_padding(const AVFormatContext *s);
 1554 void      av_format_set_metadata_header_padding(AVFormatContext *s, int c);
 1555 void *    av_format_get_opaque(const AVFormatContext *s);
 1556 void      av_format_set_opaque(AVFormatContext *s, void *opaque);
 1557 av_format_control_message av_format_get_control_message_cb(const AVFormatContext *s);
 1558 void      av_format_set_control_message_cb(AVFormatContext *s, av_format_control_message callback);
 1559 
 1560 /**
 1561  * Returns the method used to set ctx->duration.
 1562  *
 1563  * @return AVFMT_DURATION_FROM_PTS, AVFMT_DURATION_FROM_STREAM, or AVFMT_DURATION_FROM_BITRATE.
 1564  */
 1565 enum AVDurationEstimationMethod av_fmt_ctx_get_duration_estimation_method(const AVFormatContext* ctx);
 1566 
 1567 typedef struct AVPacketList {
 1568     AVPacket pkt;
 1569     struct AVPacketList *next;
 1570 } AVPacketList;
 1571 
 1572 
 1573 /**
 1574  * @defgroup lavf_core Core functions
 1575  * @ingroup libavf
 1576  *
 1577  * Functions for querying libavformat capabilities, allocating core structures,
 1578  * etc.
 1579  * @{
 1580  */
 1581 
 1582 /**
 1583  * Return the LIBAVFORMAT_VERSION_INT constant.
 1584  */
 1585 unsigned avformat_version(void);
 1586 
 1587 /**
 1588  * Return the libavformat build-time configuration.
 1589  */
 1590 const char *avformat_configuration(void);
 1591 
 1592 /**
 1593  * Return the libavformat license.
 1594  */
 1595 const char *avformat_license(void);
 1596 
 1597 /**
 1598  * Initialize libavformat and register all the muxers, demuxers and
 1599  * protocols. If you do not call this function, then you can select
 1600  * exactly which formats you want to support.
 1601  *
 1602  * @see av_register_input_format()
 1603  * @see av_register_output_format()
 1604  */
 1605 void av_register_all(void);
 1606 
 1607 void av_register_input_format(AVInputFormat *format);
 1608 void av_register_output_format(AVOutputFormat *format);
 1609 
 1610 /**
 1611  * Do global initialization of network components. This is optional,
 1612  * but recommended, since it avoids the overhead of implicitly
 1613  * doing the setup for each session.
 1614  *
 1615  * Calling this function will become mandatory if using network
 1616  * protocols at some major version bump.
 1617  */
 1618 int avformat_network_init(void);
 1619 
 1620 /**
 1621  * Undo the initialization done by avformat_network_init.
 1622  */
 1623 int avformat_network_deinit(void);
 1624 
 1625 /**
 1626  * If f is NULL, returns the first registered input format,
 1627  * if f is non-NULL, returns the next registered input format after f
 1628  * or NULL if f is the last one.
 1629  */
 1630 AVInputFormat  *av_iformat_next(AVInputFormat  *f);
 1631 
 1632 /**
 1633  * If f is NULL, returns the first registered output format,
 1634  * if f is non-NULL, returns the next registered output format after f
 1635  * or NULL if f is the last one.
 1636  */
 1637 AVOutputFormat *av_oformat_next(AVOutputFormat *f);
 1638 
 1639 /**
 1640  * Allocate an AVFormatContext.
 1641  * avformat_free_context() can be used to free the context and everything
 1642  * allocated by the framework within it.
 1643  */
 1644 AVFormatContext *avformat_alloc_context(void);
 1645 
 1646 /**
 1647  * Free an AVFormatContext and all its streams.
 1648  * @param s context to free
 1649  */
 1650 void avformat_free_context(AVFormatContext *s);
 1651 
 1652 /**
 1653  * Get the AVClass for AVFormatContext. It can be used in combination with
 1654  * AV_OPT_SEARCH_FAKE_OBJ for examining options.
 1655  *
 1656  * @see av_opt_find().
 1657  */
 1658 const AVClass *avformat_get_class(void);
 1659 
 1660 /**
 1661  * Add a new stream to a media file.
 1662  *
 1663  * When demuxing, it is called by the demuxer in read_header(). If the
 1664  * flag AVFMTCTX_NOHEADER is set in s.ctx_flags, then it may also
 1665  * be called in read_packet().
 1666  *
 1667  * When muxing, should be called by the user before avformat_write_header().
 1668  *
 1669  * User is required to call avcodec_close() and avformat_free_context() to
 1670  * clean up the allocation by avformat_new_stream().
 1671  *
 1672  * @param s media file handle
 1673  * @param c If non-NULL, the AVCodecContext corresponding to the new stream
 1674  * will be initialized to use this codec. This is needed for e.g. codec-specific
 1675  * defaults to be set, so codec should be provided if it is known.
 1676  *
 1677  * @return newly created stream or NULL on error.
 1678  */
 1679 AVStream *avformat_new_stream(AVFormatContext *s, const AVCodec *c);
 1680 
 1681 AVProgram *av_new_program(AVFormatContext *s, int id);
 1682 
 1683 /**
 1684  * @}
 1685  */
 1686 
 1687 
 1688 #if FF_API_ALLOC_OUTPUT_CONTEXT
 1689 /**
 1690  * @deprecated deprecated in favor of avformat_alloc_output_context2()
 1691  */
 1692 attribute_deprecated
 1693 AVFormatContext *avformat_alloc_output_context(const char *format,
 1694                                                AVOutputFormat *oformat,
 1695                                                const char *filename);
 1696 #endif
 1697 
 1698 /**
 1699  * Allocate an AVFormatContext for an output format.
 1700  * avformat_free_context() can be used to free the context and
 1701  * everything allocated by the framework within it.
 1702  *
 1703  * @param *ctx is set to the created format context, or to NULL in
 1704  * case of failure
 1705  * @param oformat format to use for allocating the context, if NULL
 1706  * format_name and filename are used instead
 1707  * @param format_name the name of output format to use for allocating the
 1708  * context, if NULL filename is used instead
 1709  * @param filename the name of the filename to use for allocating the
 1710  * context, may be NULL
 1711  * @return >= 0 in case of success, a negative AVERROR code in case of
 1712  * failure
 1713  */
 1714 int avformat_alloc_output_context2(AVFormatContext **ctx, AVOutputFormat *oformat,
 1715                                    const char *format_name, const char *filename);
 1716 
 1717 /**
 1718  * @addtogroup lavf_decoding
 1719  * @{
 1720  */
 1721 
 1722 /**
 1723  * Find AVInputFormat based on the short name of the input format.
 1724  */
 1725 AVInputFormat *av_find_input_format(const char *short_name);
 1726 
 1727 /**
 1728  * Guess the file format.
 1729  *
 1730  * @param pd        data to be probed
 1731  * @param is_opened Whether the file is already opened; determines whether
 1732  *                  demuxers with or without AVFMT_NOFILE are probed.
 1733  */
 1734 AVInputFormat *av_probe_input_format(AVProbeData *pd, int is_opened);
 1735 
 1736 /**
 1737  * Guess the file format.
 1738  *
 1739  * @param pd        data to be probed
 1740  * @param is_opened Whether the file is already opened; determines whether
 1741  *                  demuxers with or without AVFMT_NOFILE are probed.
 1742  * @param score_max A probe score larger that this is required to accept a
 1743  *                  detection, the variable is set to the actual detection
 1744  *                  score afterwards.
 1745  *                  If the score is <= AVPROBE_SCORE_MAX / 4 it is recommended
 1746  *                  to retry with a larger probe buffer.
 1747  */
 1748 AVInputFormat *av_probe_input_format2(AVProbeData *pd, int is_opened, int *score_max);
 1749 
 1750 /**
 1751  * Guess the file format.
 1752  *
 1753  * @param is_opened Whether the file is already opened; determines whether
 1754  *                  demuxers with or without AVFMT_NOFILE are probed.
 1755  * @param score_ret The score of the best detection.
 1756  */
 1757 AVInputFormat *av_probe_input_format3(AVProbeData *pd, int is_opened, int *score_ret);
 1758 
 1759 /**
 1760  * Probe a bytestream to determine the input format. Each time a probe returns
 1761  * with a score that is too low, the probe buffer size is increased and another
 1762  * attempt is made. When the maximum probe size is reached, the input format
 1763  * with the highest score is returned.
 1764  *
 1765  * @param pb the bytestream to probe
 1766  * @param fmt the input format is put here
 1767  * @param filename the filename of the stream
 1768  * @param logctx the log context
 1769  * @param offset the offset within the bytestream to probe from
 1770  * @param max_probe_size the maximum probe buffer size (zero for default)
 1771  * @return the score in case of success, a negative value corresponding to an
 1772  *         the maximal score is AVPROBE_SCORE_MAX
 1773  * AVERROR code otherwise
 1774  */
 1775 int av_probe_input_buffer2(AVIOContext *pb, AVInputFormat **fmt,
 1776                            const char *filename, void *logctx,
 1777                            unsigned int offset, unsigned int max_probe_size);
 1778 
 1779 /**
 1780  * Like av_probe_input_buffer2() but returns 0 on success
 1781  */
 1782 int av_probe_input_buffer(AVIOContext *pb, AVInputFormat **fmt,
 1783                           const char *filename, void *logctx,
 1784                           unsigned int offset, unsigned int max_probe_size);
 1785 
 1786 /**
 1787  * Open an input stream and read the header. The codecs are not opened.
 1788  * The stream must be closed with avformat_close_input().
 1789  *
 1790  * @param ps Pointer to user-supplied AVFormatContext (allocated by avformat_alloc_context).
 1791  *           May be a pointer to NULL, in which case an AVFormatContext is allocated by this
 1792  *           function and written into ps.
 1793  *           Note that a user-supplied AVFormatContext will be freed on failure.
 1794  * @param filename Name of the stream to open.
 1795  * @param fmt If non-NULL, this parameter forces a specific input format.
 1796  *            Otherwise the format is autodetected.
 1797  * @param options  A dictionary filled with AVFormatContext and demuxer-private options.
 1798  *                 On return this parameter will be destroyed and replaced with a dict containing
 1799  *                 options that were not found. May be NULL.
 1800  *
 1801  * @return 0 on success, a negative AVERROR on failure.
 1802  *
 1803  * @note If you want to use custom IO, preallocate the format context and set its pb field.
 1804  */
 1805 int avformat_open_input(AVFormatContext **ps, const char *filename, AVInputFormat *fmt, AVDictionary **options);
 1806 
 1807 attribute_deprecated
 1808 int av_demuxer_open(AVFormatContext *ic);
 1809 
 1810 #if FF_API_FORMAT_PARAMETERS
 1811 /**
 1812  * Read packets of a media file to get stream information. This
 1813  * is useful for file formats with no headers such as MPEG. This
 1814  * function also computes the real framerate in case of MPEG-2 repeat
 1815  * frame mode.
 1816  * The logical file position is not changed by this function;
 1817  * examined packets may be buffered for later processing.
 1818  *
 1819  * @param ic media file handle
 1820  * @return >=0 if OK, AVERROR_xxx on error
 1821  * @todo Let the user decide somehow what information is needed so that
 1822  *       we do not waste time getting stuff the user does not need.
 1823  *
 1824  * @deprecated use avformat_find_stream_info.
 1825  */
 1826 attribute_deprecated
 1827 int av_find_stream_info(AVFormatContext *ic);
 1828 #endif
 1829 
 1830 /**
 1831  * Read packets of a media file to get stream information. This
 1832  * is useful for file formats with no headers such as MPEG. This
 1833  * function also computes the real framerate in case of MPEG-2 repeat
 1834  * frame mode.
 1835  * The logical file position is not changed by this function;
 1836  * examined packets may be buffered for later processing.
 1837  *
 1838  * @param ic media file handle
 1839  * @param options  If non-NULL, an ic.nb_streams long array of pointers to
 1840  *                 dictionaries, where i-th member contains options for
 1841  *                 codec corresponding to i-th stream.
 1842  *                 On return each dictionary will be filled with options that were not found.
 1843  * @return >=0 if OK, AVERROR_xxx on error
 1844  *
 1845  * @note this function isn't guaranteed to open all the codecs, so
 1846  *       options being non-empty at return is a perfectly normal behavior.
 1847  *
 1848  * @todo Let the user decide somehow what information is needed so that
 1849  *       we do not waste time getting stuff the user does not need.
 1850  */
 1851 int avformat_find_stream_info(AVFormatContext *ic, AVDictionary **options);
 1852 
 1853 /**
 1854  * Find the programs which belong to a given stream.
 1855  *
 1856  * @param ic    media file handle
 1857  * @param last  the last found program, the search will start after this
 1858  *              program, or from the beginning if it is NULL
 1859  * @param s     stream index
 1860  * @return the next program which belongs to s, NULL if no program is found or
 1861  *         the last program is not among the programs of ic.
 1862  */
 1863 AVProgram *av_find_program_from_stream(AVFormatContext *ic, AVProgram *last, int s);
 1864 
 1865 /**
 1866  * Find the "best" stream in the file.
 1867  * The best stream is determined according to various heuristics as the most
 1868  * likely to be what the user expects.
 1869  * If the decoder parameter is non-NULL, av_find_best_stream will find the
 1870  * default decoder for the stream's codec; streams for which no decoder can
 1871  * be found are ignored.
 1872  *
 1873  * @param ic                media file handle
 1874  * @param type              stream type: video, audio, subtitles, etc.
 1875  * @param wanted_stream_nb  user-requested stream number,
 1876  *                          or -1 for automatic selection
 1877  * @param related_stream    try to find a stream related (eg. in the same
 1878  *                          program) to this one, or -1 if none
 1879  * @param decoder_ret       if non-NULL, returns the decoder for the
 1880  *                          selected stream
 1881  * @param flags             flags; none are currently defined
 1882  * @return  the non-negative stream number in case of success,
 1883  *          AVERROR_STREAM_NOT_FOUND if no stream with the requested type
 1884  *          could be found,
 1885  *          AVERROR_DECODER_NOT_FOUND if streams were found but no decoder
 1886  * @note  If av_find_best_stream returns successfully and decoder_ret is not
 1887  *        NULL, then *decoder_ret is guaranteed to be set to a valid AVCodec.
 1888  */
 1889 int av_find_best_stream(AVFormatContext *ic,
 1890                         enum AVMediaType type,
 1891                         int wanted_stream_nb,
 1892                         int related_stream,
 1893                         AVCodec **decoder_ret,
 1894                         int flags);
 1895 
 1896 #if FF_API_READ_PACKET
 1897 /**
 1898  * @deprecated use AVFMT_FLAG_NOFILLIN | AVFMT_FLAG_NOPARSE to read raw
 1899  * unprocessed packets
 1900  *
 1901  * Read a transport packet from a media file.
 1902  *
 1903  * This function is obsolete and should never be used.
 1904  * Use av_read_frame() instead.
 1905  *
 1906  * @param s media file handle
 1907  * @param pkt is filled
 1908  * @return 0 if OK, AVERROR_xxx on error
 1909  */
 1910 attribute_deprecated
 1911 int av_read_packet(AVFormatContext *s, AVPacket *pkt);
 1912 #endif
 1913 
 1914 /**
 1915  * Return the next frame of a stream.
 1916  * This function returns what is stored in the file, and does not validate
 1917  * that what is there are valid frames for the decoder. It will split what is
 1918  * stored in the file into frames and return one for each call. It will not
 1919  * omit invalid data between valid frames so as to give the decoder the maximum
 1920  * information possible for decoding.
 1921  *
 1922  * If pkt->buf is NULL, then the packet is valid until the next
 1923  * av_read_frame() or until avformat_close_input(). Otherwise the packet
 1924  * is valid indefinitely. In both cases the packet must be freed with
 1925  * av_free_packet when it is no longer needed. For video, the packet contains
 1926  * exactly one frame. For audio, it contains an integer number of frames if each
 1927  * frame has a known fixed size (e.g. PCM or ADPCM data). If the audio frames
 1928  * have a variable size (e.g. MPEG audio), then it contains one frame.
 1929  *
 1930  * pkt->pts, pkt->dts and pkt->duration are always set to correct
 1931  * values in AVStream.time_base units (and guessed if the format cannot
 1932  * provide them). pkt->pts can be AV_NOPTS_VALUE if the video format
 1933  * has B-frames, so it is better to rely on pkt->dts if you do not
 1934  * decompress the payload.
 1935  *
 1936  * @return 0 if OK, < 0 on error or end of file
 1937  */
 1938 int av_read_frame(AVFormatContext *s, AVPacket *pkt);
 1939 
 1940 /**
 1941  * Seek to the keyframe at timestamp.
 1942  * 'timestamp' in 'stream_index'.
 1943  *
 1944  * @param s media file handle
 1945  * @param stream_index If stream_index is (-1), a default
 1946  * stream is selected, and timestamp is automatically converted
 1947  * from AV_TIME_BASE units to the stream specific time_base.
 1948  * @param timestamp Timestamp in AVStream.time_base units
 1949  *        or, if no stream is specified, in AV_TIME_BASE units.
 1950  * @param flags flags which select direction and seeking mode
 1951  * @return >= 0 on success
 1952  */
 1953 int av_seek_frame(AVFormatContext *s, int stream_index, int64_t timestamp,
 1954                   int flags);
 1955 
 1956 /**
 1957  * Seek to timestamp ts.
 1958  * Seeking will be done so that the point from which all active streams
 1959  * can be presented successfully will be closest to ts and within min/max_ts.
 1960  * Active streams are all streams that have AVStream.discard < AVDISCARD_ALL.
 1961  *
 1962  * If flags contain AVSEEK_FLAG_BYTE, then all timestamps are in bytes and
 1963  * are the file position (this may not be supported by all demuxers).
 1964  * If flags contain AVSEEK_FLAG_FRAME, then all timestamps are in frames
 1965  * in the stream with stream_index (this may not be supported by all demuxers).
 1966  * Otherwise all timestamps are in units of the stream selected by stream_index
 1967  * or if stream_index is -1, in AV_TIME_BASE units.
 1968  * If flags contain AVSEEK_FLAG_ANY, then non-keyframes are treated as
 1969  * keyframes (this may not be supported by all demuxers).
 1970  * If flags contain AVSEEK_FLAG_BACKWARD, it is ignored.
 1971  *
 1972  * @param s media file handle
 1973  * @param stream_index index of the stream which is used as time base reference
 1974  * @param min_ts smallest acceptable timestamp
 1975  * @param ts target timestamp
 1976  * @param max_ts largest acceptable timestamp
 1977  * @param flags flags
 1978  * @return >=0 on success, error code otherwise
 1979  *
 1980  * @note This is part of the new seek API which is still under construction.
 1981  *       Thus do not use this yet. It may change at any time, do not expect
 1982  *       ABI compatibility yet!
 1983  */
 1984 int avformat_seek_file(AVFormatContext *s, int stream_index, int64_t min_ts, int64_t ts, int64_t max_ts, int flags);
 1985 
 1986 /**
 1987  * Start playing a network-based stream (e.g. RTSP stream) at the
 1988  * current position.
 1989  */
 1990 int av_read_play(AVFormatContext *s);
 1991 
 1992 /**
 1993  * Pause a network-based stream (e.g. RTSP stream).
 1994  *
 1995  * Use av_read_play() to resume it.
 1996  */
 1997 int av_read_pause(AVFormatContext *s);
 1998 
 1999 #if FF_API_CLOSE_INPUT_FILE
 2000 /**
 2001  * @deprecated use avformat_close_input()
 2002  * Close a media file (but not its codecs).
 2003  *
 2004  * @param s media file handle
 2005  */
 2006 attribute_deprecated
 2007 void av_close_input_file(AVFormatContext *s);
 2008 #endif
 2009 
 2010 /**
 2011  * Close an opened input AVFormatContext. Free it and all its contents
 2012  * and set *s to NULL.
 2013  */
 2014 void avformat_close_input(AVFormatContext **s);
 2015 /**
 2016  * @}
 2017  */
 2018 
 2019 #if FF_API_NEW_STREAM
 2020 /**
 2021  * Add a new stream to a media file.
 2022  *
 2023  * Can only be called in the read_header() function. If the flag
 2024  * AVFMTCTX_NOHEADER is in the format context, then new streams
 2025  * can be added in read_packet too.
 2026  *
 2027  * @param s media file handle
 2028  * @param id file-format-dependent stream ID
 2029  */
 2030 attribute_deprecated
 2031 AVStream *av_new_stream(AVFormatContext *s, int id);
 2032 #endif
 2033 
 2034 #if FF_API_SET_PTS_INFO
 2035 /**
 2036  * @deprecated this function is not supposed to be called outside of lavf
 2037  */
 2038 attribute_deprecated
 2039 void av_set_pts_info(AVStream *s, int pts_wrap_bits,
 2040                      unsigned int pts_num, unsigned int pts_den);
 2041 #endif
 2042 
 2043 #define AVSEEK_FLAG_BACKWARD 1 ///< seek backward
 2044 #define AVSEEK_FLAG_BYTE     2 ///< seeking based on position in bytes
 2045 #define AVSEEK_FLAG_ANY      4 ///< seek to any frame, even non-keyframes
 2046 #define AVSEEK_FLAG_FRAME    8 ///< seeking based on frame number
 2047 
 2048 /**
 2049  * @addtogroup lavf_encoding
 2050  * @{
 2051  */
 2052 /**
 2053  * Allocate the stream private data and write the stream header to
 2054  * an output media file.
 2055  *
 2056  * @param s Media file handle, must be allocated with avformat_alloc_context().
 2057  *          Its oformat field must be set to the desired output format;
 2058  *          Its pb field must be set to an already opened AVIOContext.
 2059  * @param options  An AVDictionary filled with AVFormatContext and muxer-private options.
 2060  *                 On return this parameter will be destroyed and replaced with a dict containing
 2061  *                 options that were not found. May be NULL.
 2062  *
 2063  * @return 0 on success, negative AVERROR on failure.
 2064  *
 2065  * @see av_opt_find, av_dict_set, avio_open, av_oformat_next.
 2066  */
 2067 int avformat_write_header(AVFormatContext *s, AVDictionary **options);
 2068 
 2069 /**
 2070  * Write a packet to an output media file.
 2071  *
 2072  * This function passes the packet directly to the muxer, without any buffering
 2073  * or reordering. The caller is responsible for correctly interleaving the
 2074  * packets if the format requires it. Callers that want libavformat to handle
 2075  * the interleaving should call av_interleaved_write_frame() instead of this
 2076  * function.
 2077  *
 2078  * @param s media file handle
 2079  * @param pkt The packet containing the data to be written. Note that unlike
 2080  *            av_interleaved_write_frame(), this function does not take
 2081  *            ownership of the packet passed to it (though some muxers may make
 2082  *            an internal reference to the input packet).
 2083  *            <br>
 2084  *            This parameter can be NULL (at any time, not just at the end), in
 2085  *            order to immediately flush data buffered within the muxer, for
 2086  *            muxers that buffer up data internally before writing it to the
 2087  *            output.
 2088  *            <br>
 2089  *            Packet's @ref AVPacket.stream_index "stream_index" field must be
 2090  *            set to the index of the corresponding stream in @ref
 2091  *            AVFormatContext.streams "s->streams". It is very strongly
 2092  *            recommended that timing information (@ref AVPacket.pts "pts", @ref
 2093  *            AVPacket.dts "dts", @ref AVPacket.duration "duration") is set to
 2094  *            correct values.
 2095  * @return < 0 on error, = 0 if OK, 1 if flushed and there is no more data to flush
 2096  *
 2097  * @see av_interleaved_write_frame()
 2098  */
 2099 int av_write_frame(AVFormatContext *s, AVPacket *pkt);
 2100 
 2101 /**
 2102  * Write a packet to an output media file ensuring correct interleaving.
 2103  *
 2104  * This function will buffer the packets internally as needed to make sure the
 2105  * packets in the output file are properly interleaved in the order of
 2106  * increasing dts. Callers doing their own interleaving should call
 2107  * av_write_frame() instead of this function.
 2108  *
 2109  * @param s media file handle
 2110  * @param pkt The packet containing the data to be written.
 2111  *            <br>
 2112  *            If the packet is reference-counted, this function will take
 2113  *            ownership of this reference and unreference it later when it sees
 2114  *            fit.
 2115  *            The caller must not access the data through this reference after
 2116  *            this function returns. If the packet is not reference-counted,
 2117  *            libavformat will make a copy.
 2118  *            <br>
 2119  *            This parameter can be NULL (at any time, not just at the end), to
 2120  *            flush the interleaving queues.
 2121  *            <br>
 2122  *            Packet's @ref AVPacket.stream_index "stream_index" field must be
 2123  *            set to the index of the corresponding stream in @ref
 2124  *            AVFormatContext.streams "s->streams". It is very strongly
 2125  *            recommended that timing information (@ref AVPacket.pts "pts", @ref
 2126  *            AVPacket.dts "dts", @ref AVPacket.duration "duration") is set to
 2127  *            correct values.
 2128  *
 2129  * @return 0 on success, a negative AVERROR on error. Libavformat will always
 2130  *         take care of freeing the packet, even if this function fails.
 2131  *
 2132  * @see av_write_frame(), AVFormatContext.max_interleave_delta
 2133  */
 2134 int av_interleaved_write_frame(AVFormatContext *s, AVPacket *pkt);
 2135 
 2136 /**
 2137  * Write a uncoded frame to an output media file.
 2138  *
 2139  * The frame must be correctly interleaved according to the container
 2140  * specification; if not, then av_interleaved_write_frame() must be used.
 2141  *
 2142  * See av_interleaved_write_frame() for details.
 2143  */
 2144 int av_write_uncoded_frame(AVFormatContext *s, int stream_index,
 2145                            AVFrame *frame);
 2146 
 2147 /**
 2148  * Write a uncoded frame to an output media file.
 2149  *
 2150  * If the muxer supports it, this function allows to write an AVFrame
 2151  * structure directly, without encoding it into a packet.
 2152  * It is mostly useful for devices and similar special muxers that use raw
 2153  * video or PCM data and will not serialize it into a byte stream.
 2154  *
 2155  * To test whether it is possible to use it with a given muxer and stream,
 2156  * use av_write_uncoded_frame_query().
 2157  *
 2158  * The caller gives up ownership of the frame and must not access it
 2159  * afterwards.
 2160  *
 2161  * @return  >=0 for success, a negative code on error
 2162  */
 2163 int av_interleaved_write_uncoded_frame(AVFormatContext *s, int stream_index,
 2164                                        AVFrame *frame);
 2165 
 2166 /**
 2167  * Test whether a muxer supports uncoded frame.
 2168  *
 2169  * @return  >=0 if an uncoded frame can be written to that muxer and stream,
 2170  *          <0 if not
 2171  */
 2172 int av_write_uncoded_frame_query(AVFormatContext *s, int stream_index);
 2173 
 2174 /**
 2175  * Write the stream trailer to an output media file and free the
 2176  * file private data.
 2177  *
 2178  * May only be called after a successful call to avformat_write_header.
 2179  *
 2180  * @param s media file handle
 2181  * @return 0 if OK, AVERROR_xxx on error
 2182  */
 2183 int av_write_trailer(AVFormatContext *s);
 2184 
 2185 /**
 2186  * Return the output format in the list of registered output formats
 2187  * which best matches the provided parameters, or return NULL if
 2188  * there is no match.
 2189  *
 2190  * @param short_name if non-NULL checks if short_name matches with the
 2191  * names of the registered formats
 2192  * @param filename if non-NULL checks if filename terminates with the
 2193  * extensions of the registered formats
 2194  * @param mime_type if non-NULL checks if mime_type matches with the
 2195  * MIME type of the registered formats
 2196  */
 2197 AVOutputFormat *av_guess_format(const char *short_name,
 2198                                 const char *filename,
 2199                                 const char *mime_type);
 2200 
 2201 /**
 2202  * Guess the codec ID based upon muxer and filename.
 2203  */
 2204 enum AVCodecID av_guess_codec(AVOutputFormat *fmt, const char *short_name,
 2205                             const char *filename, const char *mime_type,
 2206                             enum AVMediaType type);
 2207 
 2208 /**
 2209  * Get timing information for the data currently output.
 2210  * The exact meaning of "currently output" depends on the format.
 2211  * It is mostly relevant for devices that have an internal buffer and/or
 2212  * work in real time.
 2213  * @param s          media file handle
 2214  * @param stream     stream in the media file
 2215  * @param[out] dts   DTS of the last packet output for the stream, in stream
 2216  *                   time_base units
 2217  * @param[out] wall  absolute time when that packet whas output,
 2218  *                   in microsecond
 2219  * @return  0 if OK, AVERROR(ENOSYS) if the format does not support it
 2220  * Note: some formats or devices may not allow to measure dts and wall
 2221  * atomically.
 2222  */
 2223 int av_get_output_timestamp(struct AVFormatContext *s, int stream,
 2224                             int64_t *dts, int64_t *wall);
 2225 
 2226 
 2227 /**
 2228  * @}
 2229  */
 2230 
 2231 
 2232 /**
 2233  * @defgroup lavf_misc Utility functions
 2234  * @ingroup libavf
 2235  * @{
 2236  *
 2237  * Miscellaneous utility functions related to both muxing and demuxing
 2238  * (or neither).
 2239  */
 2240 
 2241 /**
 2242  * Send a nice hexadecimal dump of a buffer to the specified file stream.
 2243  *
 2244  * @param f The file stream pointer where the dump should be sent to.
 2245  * @param buf buffer
 2246  * @param size buffer size
 2247  *
 2248  * @see av_hex_dump_log, av_pkt_dump2, av_pkt_dump_log2
 2249  */
 2250 void av_hex_dump(FILE *f, const uint8_t *buf, int size);
 2251 
 2252 /**
 2253  * Send a nice hexadecimal dump of a buffer to the log.
 2254  *
 2255  * @param avcl A pointer to an arbitrary struct of which the first field is a
 2256  * pointer to an AVClass struct.
 2257  * @param level The importance level of the message, lower values signifying
 2258  * higher importance.
 2259  * @param buf buffer
 2260  * @param size buffer size
 2261  *
 2262  * @see av_hex_dump, av_pkt_dump2, av_pkt_dump_log2
 2263  */
 2264 void av_hex_dump_log(void *avcl, int level, const uint8_t *buf, int size);
 2265 
 2266 /**
 2267  * Send a nice dump of a packet to the specified file stream.
 2268  *
 2269  * @param f The file stream pointer where the dump should be sent to.
 2270  * @param pkt packet to dump
 2271  * @param dump_payload True if the payload must be displayed, too.
 2272  * @param st AVStream that the packet belongs to
 2273  */
 2274 void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st);
 2275 
 2276 
 2277 /**
 2278  * Send a nice dump of a packet to the log.
 2279  *
 2280  * @param avcl A pointer to an arbitrary struct of which the first field is a
 2281  * pointer to an AVClass struct.
 2282  * @param level The importance level of the message, lower values signifying
 2283  * higher importance.
 2284  * @param pkt packet to dump
 2285  * @param dump_payload True if the payload must be displayed, too.
 2286  * @param st AVStream that the packet belongs to
 2287  */
 2288 void av_pkt_dump_log2(void *avcl, int level, AVPacket *pkt, int dump_payload,
 2289                       AVStream *st);
 2290 
 2291 /**
 2292  * Get the AVCodecID for the given codec tag tag.
 2293  * If no codec id is found returns AV_CODEC_ID_NONE.
 2294  *
 2295  * @param tags list of supported codec_id-codec_tag pairs, as stored
 2296  * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag
 2297  * @param tag  codec tag to match to a codec ID
 2298  */
 2299 enum AVCodecID av_codec_get_id(const struct AVCodecTag * const *tags, unsigned int tag);
 2300 
 2301 /**
 2302  * Get the codec tag for the given codec id id.
 2303  * If no codec tag is found returns 0.
 2304  *
 2305  * @param tags list of supported codec_id-codec_tag pairs, as stored
 2306  * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag
 2307  * @param id   codec ID to match to a codec tag
 2308  */
 2309 unsigned int av_codec_get_tag(const struct AVCodecTag * const *tags, enum AVCodecID id);
 2310 
 2311 /**
 2312  * Get the codec tag for the given codec id.
 2313  *
 2314  * @param tags list of supported codec_id - codec_tag pairs, as stored
 2315  * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag
 2316  * @param id codec id that should be searched for in the list
 2317  * @param tag A pointer to the found tag
 2318  * @return 0 if id was not found in tags, > 0 if it was found
 2319  */
 2320 int av_codec_get_tag2(const struct AVCodecTag * const *tags, enum AVCodecID id,
 2321                       unsigned int *tag);
 2322 
 2323 int av_find_default_stream_index(AVFormatContext *s);
 2324 
 2325 /**
 2326  * Get the index for a specific timestamp.
 2327  *
 2328  * @param st        stream that the timestamp belongs to
 2329  * @param timestamp timestamp to retrieve the index for
 2330  * @param flags if AVSEEK_FLAG_BACKWARD then the returned index will correspond
 2331  *                 to the timestamp which is <= the requested one, if backward
 2332  *                 is 0, then it will be >=
 2333  *              if AVSEEK_FLAG_ANY seek to any frame, only keyframes otherwise
 2334  * @return < 0 if no such timestamp could be found
 2335  */
 2336 int av_index_search_timestamp(AVStream *st, int64_t timestamp, int flags);
 2337 
 2338 /**
 2339  * Add an index entry into a sorted list. Update the entry if the list
 2340  * already contains it.
 2341  *
 2342  * @param timestamp timestamp in the time base of the given stream
 2343  */
 2344 int av_add_index_entry(AVStream *st, int64_t pos, int64_t timestamp,
 2345                        int size, int distance, int flags);
 2346 
 2347 
 2348 /**
 2349  * Split a URL string into components.
 2350  *
 2351  * The pointers to buffers for storing individual components may be null,
 2352  * in order to ignore that component. Buffers for components not found are
 2353  * set to empty strings. If the port is not found, it is set to a negative
 2354  * value.
 2355  *
 2356  * @param proto the buffer for the protocol
 2357  * @param proto_size the size of the proto buffer
 2358  * @param authorization the buffer for the authorization
 2359  * @param authorization_size the size of the authorization buffer
 2360  * @param hostname the buffer for the host name
 2361  * @param hostname_size the size of the hostname buffer
 2362  * @param port_ptr a pointer to store the port number in
 2363  * @param path the buffer for the path
 2364  * @param path_size the size of the path buffer
 2365  * @param url the URL to split
 2366  */
 2367 void av_url_split(char *proto,         int proto_size,
 2368                   char *authorization, int authorization_size,
 2369                   char *hostname,      int hostname_size,
 2370                   int *port_ptr,
 2371                   char *path,          int path_size,
 2372                   const char *url);
 2373 
 2374 
 2375 void av_dump_format(AVFormatContext *ic,
 2376                     int index,
 2377                     const char *url,
 2378                     int is_output);
 2379 
 2380 /**
 2381  * Return in 'buf' the path with '%d' replaced by a number.
 2382  *
 2383  * Also handles the '%0nd' format where 'n' is the total number
 2384  * of digits and '%%'.
 2385  *
 2386  * @param buf destination buffer
 2387  * @param buf_size destination buffer size
 2388  * @param path numbered sequence string
 2389  * @param number frame number
 2390  * @return 0 if OK, -1 on format error
 2391  */
 2392 int av_get_frame_filename(char *buf, int buf_size,
 2393                           const char *path, int number);
 2394 
 2395 /**
 2396  * Check whether filename actually is a numbered sequence generator.
 2397  *
 2398  * @param filename possible numbered sequence string
 2399  * @return 1 if a valid numbered sequence string, 0 otherwise
 2400  */
 2401 int av_filename_number_test(const char *filename);
 2402 
 2403 /**
 2404  * Generate an SDP for an RTP session.
 2405  *
 2406  * Note, this overwrites the id values of AVStreams in the muxer contexts
 2407  * for getting unique dynamic payload types.
 2408  *
 2409  * @param ac array of AVFormatContexts describing the RTP streams. If the
 2410  *           array is composed by only one context, such context can contain
 2411  *           multiple AVStreams (one AVStream per RTP stream). Otherwise,
 2412  *           all the contexts in the array (an AVCodecContext per RTP stream)
 2413  *           must contain only one AVStream.
 2414  * @param n_files number of AVCodecContexts contained in ac
 2415  * @param buf buffer where the SDP will be stored (must be allocated by
 2416  *            the caller)
 2417  * @param size the size of the buffer
 2418  * @return 0 if OK, AVERROR_xxx on error
 2419  */
 2420 int av_sdp_create(AVFormatContext *ac[], int n_files, char *buf, int size);
 2421 
 2422 /**
 2423  * Return a positive value if the given filename has one of the given
 2424  * extensions, 0 otherwise.
 2425  *
 2426  * @param filename   file name to check against the given extensions
 2427  * @param extensions a comma-separated list of filename extensions
 2428  */
 2429 int av_match_ext(const char *filename, const char *extensions);
 2430 
 2431 /**
 2432  * Test if the given container can store a codec.
 2433  *
 2434  * @param ofmt           container to check for compatibility
 2435  * @param codec_id       codec to potentially store in container
 2436  * @param std_compliance standards compliance level, one of FF_COMPLIANCE_*
 2437  *
 2438  * @return 1 if codec with ID codec_id can be stored in ofmt, 0 if it cannot.
 2439  *         A negative number if this information is not available.
 2440  */
 2441 int avformat_query_codec(AVOutputFormat *ofmt, enum AVCodecID codec_id, int std_compliance);
 2442 
 2443 /**
 2444  * @defgroup riff_fourcc RIFF FourCCs
 2445  * @{
 2446  * Get the tables mapping RIFF FourCCs to libavcodec AVCodecIDs. The tables are
 2447  * meant to be passed to av_codec_get_id()/av_codec_get_tag() as in the
 2448  * following code:
 2449  * @code
 2450  * uint32_t tag = MKTAG('H', '2', '6', '4');
 2451  * const struct AVCodecTag *table[] = { avformat_get_riff_video_tags(), 0 };
 2452  * enum AVCodecID id = av_codec_get_id(table, tag);
 2453  * @endcode
 2454  */
 2455 /**
 2456  * @return the table mapping RIFF FourCCs for video to libavcodec AVCodecID.
 2457  */
 2458 const struct AVCodecTag *avformat_get_riff_video_tags(void);
 2459 /**
 2460  * @return the table mapping RIFF FourCCs for audio to AVCodecID.
 2461  */
 2462 const struct AVCodecTag *avformat_get_riff_audio_tags(void);
 2463 /**
 2464  * @return the table mapping MOV FourCCs for video to libavcodec AVCodecID.
 2465  */
 2466 const struct AVCodecTag *avformat_get_mov_video_tags(void);
 2467 /**
 2468  * @return the table mapping MOV FourCCs for audio to AVCodecID.
 2469  */
 2470 const struct AVCodecTag *avformat_get_mov_audio_tags(void);
 2471 
 2472 /**
 2473  * @}
 2474  */
 2475 
 2476 /**
 2477  * Guess the sample aspect ratio of a frame, based on both the stream and the
 2478  * frame aspect ratio.
 2479  *
 2480  * Since the frame aspect ratio is set by the codec but the stream aspect ratio
 2481  * is set by the demuxer, these two may not be equal. This function tries to
 2482  * return the value that you should use if you would like to display the frame.
 2483  *
 2484  * Basic logic is to use the stream aspect ratio if it is set to something sane
 2485  * otherwise use the frame aspect ratio. This way a container setting, which is
 2486  * usually easy to modify can override the coded value in the frames.
 2487  *
 2488  * @param format the format context which the stream is part of
 2489  * @param stream the stream which the frame is part of
 2490  * @param frame the frame with the aspect ratio to be determined
 2491  * @return the guessed (valid) sample_aspect_ratio, 0/1 if no idea
 2492  */
 2493 AVRational av_guess_sample_aspect_ratio(AVFormatContext *format, AVStream *stream, AVFrame *frame);
 2494 
 2495 /**
 2496  * Guess the frame rate, based on both the container and codec information.
 2497  *
 2498  * @param ctx the format context which the stream is part of
 2499  * @param stream the stream which the frame is part of
 2500  * @param frame the frame for which the frame rate should be determined, may be NULL
 2501  * @return the guessed (valid) frame rate, 0/1 if no idea
 2502  */
 2503 AVRational av_guess_frame_rate(AVFormatContext *ctx, AVStream *stream, AVFrame *frame);
 2504 
 2505 /**
 2506  * Check if the stream st contained in s is matched by the stream specifier
 2507  * spec.
 2508  *
 2509  * See the "stream specifiers" chapter in the documentation for the syntax
 2510  * of spec.
 2511  *
 2512  * @return  >0 if st is matched by spec;
 2513  *          0  if st is not matched by spec;
 2514  *          AVERROR code if spec is invalid
 2515  *
 2516  * @note  A stream specifier can match several streams in the format.
 2517  */
 2518 int avformat_match_stream_specifier(AVFormatContext *s, AVStream *st,
 2519                                     const char *spec);
 2520 
 2521 int avformat_queue_attached_pictures(AVFormatContext *s);
 2522 
 2523 
 2524 /**
 2525  * @}
 2526  */
 2527 
 2528 #endif /* AVFORMAT_AVFORMAT_H */
